{"version":3,"file":"static/webpack/static/development/pages/f/[id]/[formType].js.d34b6156d0e728622b65.hot-update.js","sources":["webpack:///./pages/f//[formType].js"],"sourcesContent":["import React, { Component } from 'react'\nimport cookies from 'next-cookies';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport OneForm from '../../../components/forms/OneForm';\nimport { LoginForm } from '../../../components/forms/LoginForm';\nimport { Button } from '../../../components/Button';\nimport { AbstractForm } from '../../../components/forms/Abstract';\nimport { Authorprofile } from '../../../components/forms/Authorprofile';\nimport { Exhibitorprofile } from '../../../components/forms/Exhibitorprofile';\nimport { StyledPage } from '../../../components/styles/PageStyles';\nimport HeroSection from '../../../components/HeroSection';\nimport {FixedDates, FixedBox} from '../../../components/Dates';\n// import { Esop } from './Esop';\n// import { GetFormSSR } from '../../components/forms/FormActions';\nconst Form = props => {\n    const { presets, __csrf_token, } = props.data || {};\n    const {apiUrl, id, formType, taskType} = props;// ? GETTIN FROM GET INITIAL PROPS\n    const FT = formType || '';\n    const TT = taskType || '';\n    console.log('uniform',{apiUrl, id, FT, TT, __csrf_token, presets})\n    return (\n        <>\n        <HeroSection>\n            Eurobrake 2020\n            </HeroSection>\n        <StyledPage>\n            <FixedDates/>\n                    <FixedBox />\n            {formType == 'abstract' && formType == 'author' &&\n\n            <Link href=\"/authorsAreaDash\">\n                          <Button\n                        background=\"#134381\"\n                        br=\"100rem\"\n                        bcolor=\"#134381\"\n                        style={{ marginLeft: 'auto', color:\"#FFF\" }}\n                    >Back to Dashboard</Button>\n            </Link>\n            }\n            <OneForm form={FT} type={TT} presets={presets} csrf={__csrf_token} apiUrl={apiUrl} paperId={id}/>\n    </StyledPage>\n        </>\n    )\n}\nexport default Form\n\n// Form.getInitialProps = async context => {\n//     const { id, taskUrl, formType, taskType } = context.query ;\n//     const { logintoken } = cookies(context) || {};\n//     let apiUrl = '';\n//    if(formType == 'contact') apiUrl = `https://prelude.eurobrake.net/contact` \n//    if(formType == 'author') apiUrl = `https://prelude.eurobrake.net/authors/profile` \n//    if(formType == 'reset') apiUrl = `https://prelude.eurobrake.net/authors/profile` \n//    if(formType != 'reset' && formType != 'author' && formType != 'contact') apiUrl = `https://prelude.eurobrake.net/authors/edit/${id}`\n   \n//     console.log('1st GIP', { id, logintoken, apiUrl, taskUrl, formType, taskType })\n//     console.log('props', { id, logintoken, apiUrl, taskUrl, formType, taskType })\n//     const redirectOnError = () =>\n//         process.browser\n//             ? Router.push('/authorsArea')\n//             : context.res.writeHead(301, { Location: '/authorsArea' })\n\n//     if(formType === 'reset') return { apiUrl, id, formType, taskType}// todo sort out real call\n//     if(formType === 'contact') {\n//         try {\n//             const response = await fetch(apiUrl, {\n//                 credentials: 'include',\n//                 cache: 'no-cache',\n//             })\n//             const data = await response.json()\n//             if (data.status === 'success') {\n//                 console.log('res.ok uniform GIP', data)\n//                 return { data, apiUrl, id, formType, taskType }\n//             }\n//             else {\n//                 console.log('not reading success')\n//                 console.log('stringyfied', JSON.stringify(data))\n//                 // https://github.com/developit/unfetch#caveats\n//                 return redirectOnError()\n//             }\n//         } catch (error) {\n//             // Implementation or Network error\n//             console.log(error)\n//             return await redirectOnError()\n//         }\n//     }\n//    else if (logintoken) {\n//         try {\n//             const response = await fetch(apiUrl, {\n//                 credentials: 'include',\n//                 cache: 'no-cache',\n//                 headers: {\n//                     Authorization: 'Bearer ' + logintoken,\n//                 }\n//             })\n//             const data = await response.json()\n//             if (data.status === 'success') {\n//                 console.log('res.ok 2nd GIP', data)\n//                 return { data, apiUrl, id, formType, taskType }\n//             }\n//             else {\n//                 console.log('not reading success')\n//                 console.log('stringyfied', JSON.stringify(data))\n//                 // https://github.com/developit/unfetch#caveats\n//                 return redirectOnError()\n//             }\n//         } catch (error) {\n//             // Implementation or Network error\n//             console.log(error)\n//             return await redirectOnError()\n//         }\n    \n//     }     \n// }\n   "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}
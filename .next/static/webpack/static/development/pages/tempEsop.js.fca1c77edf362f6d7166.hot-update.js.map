{"version":3,"file":"static/webpack/static/development/pages/tempEsop.js.fca1c77edf362f6d7166.hot-update.js","sources":["webpack:///./components/forms/FormControl.js"],"sourcesContent":["import * as yup from 'yup';\n\nconst countWords = (str) => {\n  let matches = str.match(/[\\w\\d\\’\\'-]+/gi);\n  return matches ? matches.length : 0;\n}\n\nexport const ContactSchema = yup.object().shape({\n    name: yup.string().nullable(),\n    firstname: yup.string().required('Required'),\n    lastname:yup.string().required('Required'),\n    jobtitle:yup.string().nullable(),\n    company: yup.string().required('Required'),\n    address: yup.string().nullable(),\n    email: yup.string().required('Required')\n    .email(),\n    enquiry: yup.string().required('Required')\n     .test(\n        'wordCount',\n        'Max 750 words',\n        value => value && value != ' ' &&\n          value.match(/[\\w\\d\\’\\'-]+/gi).length <= 750\n      ),\n})\n\n\n\nexport const AuthorSchema = yup.object().shape({\n    title: yup.string().nullable(),\n    firstname: yup.string().required('Required'),\n    lastname:yup.string().required('Required'),\n    email: yup.string().required('Required')\n    .email(),\n    jobtitle:yup.string().required('Required'),\n    company: yup.string().required('Required'),\n    address1: yup.string().required('Required'),\n    address2: yup.string().nullable(),\n    address3: yup.string().nullable(),\n    city:yup.string().required('Required'),\n    scp:yup.string().nullable(),\n    postal: yup.string().nullable(),\n    country: yup.string().required('Required'),\n    phone: yup.string().required('Required'),\n    fax: yup.string().nullable(),\n    password:yup.string().nullable(),\n    confirmed_password: yup.string().nullable()\n\n})\n\nexport const ResetSchema = yup.object().shape({\n     new_password:  yup.string().required('Required')\n     .min(8, 'Password must be a least 8 characters long'),\n    confirm_password: yup.string().required('Required')\n    .min(8, 'Password must be a least 8 characters long')\n     .oneOf([yup.ref('new_password'), null],'Passwords must match')\n    \n});\n        \nexport const LoginSchema = yup.object().shape({\n    username: yup.string().required('Required')\n        .email('Please enter a valid email'),\n    password: yup.string().required('Required'),\n});\n        \nexport const AbstractSchema = yup.object().shape({\n    author_title: yup.string().nullable(),\n    author_firstname: yup.string().test(\n                'Titlecase',\n                'name must be in title case!',\n               value =>  value[0] != value[0].toLowerCase()\n            ).required('Required'),\n    author_lastname: yup.string().test(\n                'Titlecase',\n                'name must be in title case!',\n               value =>  value[0] != value[0].toLowerCase()\n            ).required('Required'),\n    author_email: yup.string().required('Required')\n        .email(),\n    author_jobtitle: yup.string().required('Required'),\n    author_company: yup.string().required('Required'),\n    author_address1: yup.string().required('Required'),\n    author_address2: yup.string().nullable(),\n    author_address3: yup.string().nullable(),\n    author_city: yup.string().required('Required'),\n    author_scp: yup.string().required('Required'),\n    author_postal: yup.string().required('Required'),\n    author_country: yup.string().required('Required'),\n    author_phone: yup.string().required('Required'),\n    is_presenting_author: yup.string().required('Required'),\n    papertitle: yup.string().required('Required'),   \n    abstract: yup.string().test(\n        'wordCount',\n        'Max 750 words',\n        value => value && \n          value.match(/[\\w\\d\\’\\'-]+/gi).length <= 750\n      ).required('Required'),\n    keywords: yup.string().required('Required'),\n    consider_for_journal: yup.string().nullable(),\n    secondary_authors: yup.array()\n        .of(yup.object().shape({\n            title: yup.string().nullable(),\n            firstname: yup.string().test(\n                'Titlecase',\n                'name must be in title case!',\n               value =>  value[0] != value[0].toLowercase \n            )\n                .required('Required'),\n            lastname: yup.string().test(\n                'Titlecase',\n                'name must be in title case!',\n               value =>  value[0] != value[0].toLowercase \n            )\n                .required('Required'),\n            email: yup.string()\n                .email()\n                .required('Required'),\n            company: yup.string()\n                .required('Required'),\n            country: yup.string()\n                .required('Required'),\n            is_presenting_author: yup.string()\n                .required('Required'),\n        }))\n});\n\n const CV_SUPPORTED_FORMATS = [\n     '.pdf', \n     '.doc', \n     '.docx',\n     'pdf', \n     'doc', \n     'docx',\n     'application/pdf', \n     'application/msword', \n     'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    ];\n\n const PROOF_SUPPORTED_FORMATS = [\n     '.jpg', \n     '.jpeg', \n     '.png', \n     '.pdf', \n     '.doc', \n     '.docx', \n     'jpg', \n     'jpeg', \n     'png', \n     'pdf', \n     'doc', \n     'docx', \n     'image/jpeg', \n     \"image/png\",\n    'application/pdf', \n     'application/msword', \n     'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    ];\n\n  const FILE_SIZE = 5033164800 ;\n\n\nexport const EsopSchema = yup.object().shape({\n    student_title: yup.string().nullable(),\n    student_firstname: yup.string().required('Required'),\n    student_lastname: yup.string().required('Required'),\n    student_email: yup.string().required('Required'),\n    student_address1: yup.string().required('Required'),\n    student_address2: yup.string().nullable(),\n    student_address3: yup.string().nullable(),\n    student_city: yup.string().required('Required'),\n    student_scp: yup.string().nullable(),\n    student_postal: yup.string().nullable(),\n    student_country: yup.string().required('Required'),\n    student_membersociety: yup.string().nullable(),\n    birth_city: yup.string().nullable(),\n    birth_country: yup.string().nullable(),\n    student_level_current: yup.string().required('Required'),\n    student_level_seeking: yup.string().required('Required'),\n    university_course: yup.string().required('Required'),\n    university_name: yup.string().required('Required'),\n    university_address1: yup.string().nullable(),\n    university_address2: yup.string().nullable(),\n    university_address3: yup.string().nullable(),\n    university_city: yup.string().required('Required'),\n    university_scp: yup.string().nullable(),\n    university_postal: yup.string().nullable(),\n    university_country: yup.string().required('Required'),\n    cv_filename_uploader: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && CV_SUPPORTED_FORMATS.includes(value.type)),\n    personal_statement: yup.string().required('Required')\n      .test(\n        'wordCount',\n        'Max 250 words',\n        value => value && value != ' ' &&\n          value.match(/[\\w\\d\\’\\'-]+/gi)\n          .length <= 250\n      )\n      .test(\n        'wordCount',\n        'Min 150 words',\n        value => value && value != ' ' &&\n          value.match(/[\\w\\d\\’\\'-]+/gi)\n          .length >= 150\n      ),\n    student_status_filename_uploader: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && PROOF_SUPPORTED_FORMATS.includes(value.type))\n    .test(\n          \"fileSize\",\n          \"File too large\",\n          value => value && value.size <= FILE_SIZE\n        ),\n    question_1_answer: yup.string().required('Required'),\n    question_2_answer: yup.string().required('Required'),\n    question_3_answer: yup.string().required('Required'),\n    question_4_answer: yup.array().required('Required').max(3, 'Please select only three').min(3, 'Please select three'),\n    youtube_url: yup.string().nullable(),\n    roundtable: yup.array().nullable(),\n    roundtable_other: yup.string().nullable(),\n    marketing: yup.string().required('Required'),\n    marketing_other: yup.string().nullable(),\n    previous_participant: yup.string().required('Required'),\n    initiatives: yup.array().nullable(),\n    initiatives_other: yup.string().nullable(),\n    consent_sponsors: yup.string().nullable(),\n    consent_fiec: yup.string().nullable(),\n    consent_wep: yup.string().nullable(),\n    consent_bursary: yup.string().nullable(),\n    consent_events: yup.string().nullable(),\n    consent_yfia: yup.string().nullable(),\n    __csrf_token: yup.string()\n});\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAbA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAsBA;AACA;AAEA;AAHA;AASA;AACA;AAEA;AAHA;AAMA;AACA;AACA;AAGA;AAAA;AAEA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAGA;AAGA;AAAA;AAGA;AAGA;AAEA;AAEA;AArBA;AAnCA;AA6DA;AAYA;AAoBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAIA;AAAA;AAOA;AAAA;AAIA;AAGA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/_app.js.e3b61e258b3ed9902b58.hot-update.js","sources":["webpack:///./utils/auth.js"],"sourcesContent":["import { useEffect } from 'react'\nimport Router from 'next/router';\nimport cookies from 'next-cookies';\nimport cookie from 'js-cookie';\nimport { GetForm } from '../components/forms/FormActions';\n\n\n\n\n\n\n\nexport const login = ({ logintoken }) => {\n\n  cookie.set('logintoken', logintoken, { expires: 1 })\n  Router.push('/authorsAreaDash')\n}\n\n// CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n\n  const { logintoken } = cookies(ctx);\n  console.log('auth', logintoken)\n  // If there's no token, it means the user is not logged in.\n  if (!logintoken) {\n    if (ctx.req) {\n      // If `ctx.req` is available it means we are on the server.\n      ctx.res.writeHead(302, { Location: '/authorsArea' })\n      ctx.res.end()\n    } else {\n      // This should only happen on client.\n      Router.push('/authorsArea')\n    }\n  }\n\n  return logintoken;\n\n}\n\n// LOGOUT FUNCTION\n\nexport const logout = async (ctx) => {\n  const url = 'https://prelude.eurobrake.net/authors/logout';\n  // ? need to set up fetch req???\n  await GetForm(url)\n  await cookie.remove('logintoken')\n\n  // To trigger the event listener we save some random data into the `logout` key\n  await window.localStorage.setItem(\"logout\", Date.now());\n\n  await Router.push(\"/authors\")\n\n};\n\n// IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!')\n        Router.push('/authors')\n      }\n    }\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout)\n\n      return () => {\n        window.removeEventListener('storage', syncLogout)\n        window.localStorage.removeItem('logout')\n      }\n    }, [null])\n\n    return <WrappedComponent {...props} />\n  }\n\n  Wrapper.getInitialProps = async ctx => {\n    const logintoken = auth(ctx)                // ! AUTH\n    const componentProps =\n      WrappedComponent.getInitialProps &&\n      (await WrappedComponent.getInitialProps(ctx))\n    return { ...componentProps, logintoken }\n  }\n\n  return Wrapper\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAKA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;;;;A","sourceRoot":""}
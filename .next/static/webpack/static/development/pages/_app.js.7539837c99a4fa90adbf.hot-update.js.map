{"version":3,"file":"static/webpack/static/development/pages/_app.js.7539837c99a4fa90adbf.hot-update.js","sources":["webpack:///./components/forms/Newsletter.js"],"sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport {LoginSchema} from './FormControl';\n\n\n\n\nexport const Newsletter = () => {\n    const [Loading, setLoading] = useState(false);\n    const [Toggle, setToggle] = useState(false);\n    const [Status, setStatus] = useState(null);\n    const FT = \"newsletter\"\n    const url = 'https://prelude.eurobrake.net/signup';\n    console.log({url})\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm }) => {\n\n                const onSubmit = async () => {\n                   setLoading(true);\n                  {/* values.__csrf_token = csrf */}\n                    console.log('submitting')\n                  let res =  await SendForm({values, url, FT});\n                  let data = await  res && res.status;\n                  console.log({status})\n                 data && setStatus(data) && setToggle(true) && setLoading(false)\n                  return \n              }\n\n                return (\n                    <StyledForm>\n                      <div className=\"form\" >\n\n                        <div className=\"form-field-news\">\n                            <label\n                                htmlFor=\"name\"\n                                className=\"form-label-news\">\n                                Name:\n                        </label>\n                            <Field\n                                type=\"text\"\n                                className=\"form-input-news\"\n                                onClick={handleChange}\n                                value={values.name}\n                                style={{ }}\n                                name=\"name\"\n                                component={TextField}\n                            />\n                        </div>\n                        <div className=\"form-field-news\">\n                            <label\n                                htmlFor=\"email\"\n                                className=\"\">\n                                Email:\n                        </label>\n                            <Field\n                                type=\"email\"\n                                className=\"form-input-news\"\n                                onClick={handleChange}\n                                value={values.name}\n                                style={{  }}\n                                name=\"email\"\n                                component={TextField}\n                            />\n                        </div>\n                       {Loading ?  <CircularProgress size={24} className=\"loading\"/> : \n                       <Button \n                        onClick={onSubmit}\n                           padding=\".5rem \" \n                           style={{ fontSize: \"1rem\", height: '2rem', alignSelf: 'center'}}>\n                            {Status ? Status : 'submit'}\n                        </Button>}\n                      </div>\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n// ? For now im by passin the email link just to check what i have with a reset token\n\n\nconst emptyInitial = {\n    name: '',\n    email: '',\n};\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AALA;AAIA;AAJA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AACA;AAGA;AACA;AACA;AAFA;;;;A","sourceRoot":""}
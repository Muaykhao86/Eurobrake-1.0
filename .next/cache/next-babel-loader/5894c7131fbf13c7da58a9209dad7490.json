{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nexport const login = ({\n  token\n}) => {\n  Router.push('/authorsArea');\n}; // CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx);\n\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n}; // LOGOUT FUNCTION\n\nexport const logout = () => {\n  cookie.remove('token'); // To trigger the event listener we save some random data into the `logout` key\n\n  window.localStorage.setItem(\"logout\", _Date$now());\n  Router.push(\"/login\");\n}; // IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/login');\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout);\n      return () => {\n        window.removeEventListener('storage', syncLogout);\n        window.localStorage.removeItem('logout');\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, props);\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const token = auth(ctx);\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread({}, componentProps, {\n      token\n    });\n  };\n\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}
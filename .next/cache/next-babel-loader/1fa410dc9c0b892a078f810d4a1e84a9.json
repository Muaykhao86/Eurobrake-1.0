{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/Tasks.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik, Field } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox } from 'formik-material-ui';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { StyledTask } from './Taskstyles'; // async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport var Tasks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tasks, _Component);\n\n  function Tasks(props) {\n    var _this;\n\n    _classCallCheck(this, Tasks);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tasks).call(this, props));\n    _this.state = {\n      taskType: ''\n    }; // todo => depending on the task name I will render the task dynamicly \n    // * will have \n    //   paper\n    //   ppt\n    //   permissions\n    //   poster-accept\n    //   poster\n    //   bio\n    //   pitchvideo\n    // * EACH WILL BE A COMPONENT\n\n    return _this;\n  }\n\n  _createClass(Tasks, [{\n    key: \"render\",\n    value: function render() {\n      var emptyInitial = {\n        biography: ''\n      };\n      var _this$props = this.props,\n          presets = _this$props.presets,\n          csrf = _this$props.csrf,\n          apiUrl = _this$props.apiUrl,\n          paperId = _this$props.paperId,\n          type = _this$props.type;\n      console.log('tasks', presets, csrf, apiUrl, paperId, type);\n      return (// ! NEED PRESETS FOR TASKS\n        __jsx(Formik, {\n          initialValues: emptyInitial,\n          enableReinitialize: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, function (_ref) {\n          var values = _ref.values,\n              handleChange = _ref.handleChange;\n          console.log(values, 'Tasks');\n          return __jsx(StyledTask, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, __jsx(Typography, {\n            className: \"task-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, paperId), __jsx(Typography, {\n            className: \"task-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, \"Upload Pitch Video Slide\"), __jsx(Typography, {\n            gutterBottom: true,\n            className: \"task-label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, \"Please upload your pitch video as a PowerPoint slide using the form below\"), __jsx(Button, {\n            onClick: function onClick() {\n              return console.log(values);\n            },\n            bcolor: \"#134381\",\n            background: \"#134381\",\n            br: \"100rem\",\n            style: {\n              margin: \"3rem\",\n              color: '#FFF'\n            },\n            padding: \".5rem 4rem\",\n            fontSize: \"1.7rem\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, \"Send\"));\n        })\n      );\n    }\n  }]);\n\n  return Tasks;\n}(Component);","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/Tasks.js"],"names":["React","Component","useState","Link","Typography","Formik","Field","TextField","SimpleFileUpload","CheckboxWithLabel","Checkbox","Button","SendForm","StyledTask","Tasks","props","state","taskType","emptyInitial","biography","presets","csrf","apiUrl","paperId","type","console","log","values","handleChange","margin","color"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,MAAT,EAAkBC,KAAlB,QAAgC,QAAhC;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,iBAAtC,EAAyDC,QAAzD,QAAwE,oBAAxE;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAAQC,UAAR,QAAyB,cAAzB,C,CAIA;AACA;AACA;;AAEA,WAAaC,KAAb;AAAA;AAAA;AAAA;;AACA,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb,CAFe,CAKf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAde;AAelB;;AAhBD;AAAA;AAAA,6BAkBQ;AACJ,UAAMC,YAAY,GAAG;AACjBC,QAAAA,SAAS,EAAE;AADM,OAArB;AADI,wBAK2C,KAAKJ,KALhD;AAAA,UAKGK,OALH,eAKGA,OALH;AAAA,UAKYC,IALZ,eAKYA,IALZ;AAAA,UAKkBC,MALlB,eAKkBA,MALlB;AAAA,UAK0BC,OAL1B,eAK0BA,OAL1B;AAAA,UAKmCC,IALnC,eAKmCA,IALnC;AAMJC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,OAArB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,OAA5C,EAAqDC,IAArD;AAEA,aACI;AAGA,cAAC,MAAD;AACC,UAAA,aAAa,EAAEN,YADhB;AAEI,UAAA,kBAAkB,MAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIK,gBAA6B;AAAA,cAA1BS,MAA0B,QAA1BA,MAA0B;AAAA,cAAlBC,YAAkB,QAAlBA,YAAkB;AAC1BH,UAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAAoB,OAApB;AACA,iBACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,UAAD;AAAY,YAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAoCJ,OAApC,CADJ,EAEI,MAAC,UAAD;AAAY,YAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAFJ,EAGI,MAAC,UAAD;AAAY,YAAA,YAAY,MAAxB;AAAyB,YAAA,SAAS,EAAC,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFAHJ,EAOI,MAAC,MAAD;AACI,YAAA,OAAO,EAAE;AAAA,qBAAME,OAAO,CAACC,GAAR,CAAYC,MAAZ,CAAN;AAAA,aADb;AAEI,YAAA,MAAM,EAAC,SAFX;AAGI,YAAA,UAAU,EAAC,SAHf;AAII,YAAA,EAAE,EAAC,QAJP;AAKI,YAAA,KAAK,EAAE;AAAEE,cAAAA,MAAM,EAAE,MAAV;AAAkBC,cAAAA,KAAK,EAAE;AAAzB,aALX;AAMI,YAAA,OAAO,EAAC,YANZ;AAOI,YAAA,QAAQ,EAAC,QAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,CADJ;AAqBH,SA3BL;AAJJ;AAkCH;AA5DD;;AAAA;AAAA,EAA2B7B,SAA3B","sourcesContent":["import React, { Component, useState } from 'react'\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik,  Field, } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox} from 'formik-material-ui';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport {StyledTask} from './Taskstyles';\n\n\n\n// async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport class Tasks extends Component{\nconstructor(props) {\n    super(props);\n    this.state = {\n        taskType: ''\n    }\n    // todo => depending on the task name I will render the task dynamicly \n    // * will have \n    //   paper\n    //   ppt\n    //   permissions\n    //   poster-accept\n    //   poster\n    //   bio\n    //   pitchvideo\n    // * EACH WILL BE A COMPONENT\n}\n\nrender(){\n    const emptyInitial = {\n        biography: ''\n    }\n\n    const {presets, csrf, apiUrl, paperId, type} = this.props;\n    console.log('tasks', presets, csrf, apiUrl, paperId, type);\n    \n    return (\n        // ! NEED PRESETS FOR TASKS\n\n\n        <Formik\n         initialValues={emptyInitial}\n            enableReinitialize\n        >\n            {({ values, handleChange}) => {\n                console.log(values, 'Tasks')\n                return (\n                    <StyledTask>\n                        <Typography className=\"task-title\">{paperId}</Typography>\n                        <Typography className=\"task-title\">Upload Pitch Video Slide</Typography>\n                        <Typography gutterBottom className=\"task-label\" >Please upload your pitch video as a PowerPoint slide using the form below</Typography>\n                       \n                       \n                       \n                        <Button \n                            onClick={() => console.log(values)}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\", color: '#FFF' }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Send\n                        </Button>\n                        \n                    </StyledTask>\n                )\n            }}\n        </Formik>\n    )\n};\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
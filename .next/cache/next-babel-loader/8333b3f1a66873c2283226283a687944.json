{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { LoginSchema } from './FormControl';\nimport Link from 'next/link'; // async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport var LoginForm = function LoginForm() {\n  var _useState = useState(false),\n      Loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      Reset = _useState2[0],\n      setReset = _useState2[1];\n\n  var _useState3 = useState(false),\n      Toggle = _useState3[0],\n      setToggle = _useState3[1];\n\n  var _useState4 = useState(null),\n      Status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var emptyReset = {\n    username: ''\n  };\n  var emptyInitial = {\n    username: '',\n    password: ''\n  };\n  var url = Reset ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n  console.log({\n    url: url\n  });\n  return __jsx(Formik, {\n    initialValues: Reset ? emptyReset : emptyInitial,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        validateForm = _ref.validateForm;\n\n    var onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res, data, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return setLoading(true);\n\n              case 2:\n                _context2.next = 4;\n                return SendForm({\n                  url: url,\n                  values: values\n                });\n\n              case 4:\n                res = _context2.sent;\n                _context2.next = 7;\n                return res;\n\n              case 7:\n                _context2.t0 = _context2.sent;\n\n                if (!_context2.t0) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.t0 = res.status;\n\n              case 10:\n                data = _context2.t0;\n                console.log({\n                  status: status\n                });\n                data && setStatus(data) && setToggle(function (Toggle) {\n                  return !Toggle;\n                });\n\n                result =\n                /*#__PURE__*/\n                function () {\n                  var _ref3 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return setLoading(false);\n\n                          case 2:\n                            _context.next = 4;\n                            return setToggle(true);\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function result() {\n                    return _ref3.apply(this, arguments);\n                  };\n                }();\n\n                return _context2.abrupt(\"return\", result());\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function onSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(StyledForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, Reset && __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Please enter your email to reset your password\"), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Email:\"), __jsx(Field, {\n      type: \"email\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.username,\n      style: {\n        color: '#134381'\n      },\n      name: \"username\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), !Reset && __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.password,\n      style: {\n        color: '#134381'\n      },\n      name: \"password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), Loading ? __jsx(CircularProgress, {\n      size: 24,\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }) : __jsx(Button, {\n      onClick: function onClick() {\n        return validateForm().then(function (errors) {\n          return _Object$keys(errors).length === 0 && onSubmit();\n        });\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, Reset ? 'Reset' : 'Login'), Toggle && __jsx(Typography, {\n      className: \"form-title\",\n      style: {\n        alignSelf: 'center',\n        textTransform: 'uppercase'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, Status), __jsx(\"a\", {\n      onClick: function onClick() {\n        return setReset(function (Reset) {\n          return !Reset;\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(Typography, {\n      className: \"form-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, Reset ? 'Back to Login' : 'Forgotten your password?')));\n  });\n}; // ? For now im by passin the email link just to check what i have with a reset token","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js"],"names":["React","Component","useState","Formik","Form","Field","TextField","CircularProgress","StyledForm","Button","SendForm","Typography","LoginSchema","Link","LoginForm","Loading","setLoading","Reset","setReset","Toggle","setToggle","Status","setStatus","emptyReset","username","emptyInitial","password","url","console","log","values","handleChange","validateForm","onSubmit","res","status","data","result","color","then","errors","length","margin","alignSelf","textTransform"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {LoginSchema} from './FormControl';\nimport Link from 'next/link';\n\n\n// async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport const LoginForm = () => {\n    const [Loading, setLoading] = useState(false);\n    const [Reset, setReset] = useState(false);\n    const [Toggle, setToggle] = useState(false);\n    const [Status, setStatus] = useState(null);\n    const emptyReset={\n        username: '',\n    };\n\n    const emptyInitial = {\n        username: '',\n        password: '',\n    };\n\n    const url = Reset ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n    console.log({url})\n    return (\n        <Formik\n            initialValues={Reset ? emptyReset : emptyInitial}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm }) => {\n\n                const onSubmit = async () => {\n                 await setLoading(true);\n                   const res = await SendForm({url, values});\n                   const data = await res && res.status;  \n                   console.log({status})\n                  data && setStatus(data) && setToggle(Toggle => !Toggle)\n                    let result = async () => {\n                  await  setLoading(false)\n                  await setToggle(true)\n                   }    \n                  \n                return result()  \n              }\n\n                return (\n                    <StyledForm>\n                        {Reset && <Typography className=\"form-title\">Please enter your email to reset your password</Typography>}\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Email:\n                        </label>\n                            <Field\n                                type=\"email\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.username}\n                                style={{ color: '#134381' }}\n                                name=\"username\"\n                                component={TextField}\n                            />\n                        </div>\n                        {!Reset &&\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.password}\n                                style={{ color: '#134381' }}\n                                name=\"password\"\n                                component={TextField}\n                            />\n                        </div>\n                        }\n                          {Loading ?  <CircularProgress size={24} className=\"loading\"/> : \n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            {Reset ? 'Reset' : 'Login'}\n                        </Button>\n                      }\n\n                    {Toggle && <Typography className=\"form-title\" style={{alignSelf: 'center', textTransform: 'uppercase'}}>{Status}</Typography>}\n                        \n                        {/* <Link\n                            href=\"/f/[id]/[formType]\"\n                            as={`/f/XC8Z3FWxDuQtk68qVs3uwF/reset`} > */}\n                        <a onClick={() => setReset(Reset => !Reset)}>\n                           <Typography className=\"form-link\">{Reset ?   'Back to Login' : 'Forgotten your password?' }</Typography> \n                        </a>\n                        {/* </Link> */}\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n// ? For now im by passin the email link just to check what i have with a reset token\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
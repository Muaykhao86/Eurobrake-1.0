{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/ResetForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { ResetSchema } from './FormControl'; // async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport var ResetForm = function ResetForm(props) {\n  var _useState = useState(false),\n      Toggle = _useState[0],\n      setToggle = _useState[1];\n\n  var url = \"https://prelude.eurobrake.net/authors/reset/\".concat(props.paperId);\n  console.log({\n    url: url\n  });\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: ResetSchema,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        validateForm = _ref.validateForm,\n        errors = _ref.errors,\n        setFieldTouched = _ref.setFieldTouched,\n        handleSubmit = _ref.handleSubmit,\n        submitForm = _ref.submitForm;\n\n    var allTouched =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _Object$keys(values).forEach(function (key) {\n                  setFieldTouched(key, true);\n                });\n\n              case 2:\n                _context.next = 4;\n                return validateForm().then(function (errors) {\n                  return _Object$keys(errors).length === 0 && onSubmit();\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function allTouched() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var FT, res, status;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log('click');\n                FT = 'reset';\n                _context2.next = 4;\n                return SendForm({\n                  values: values,\n                  url: url,\n                  FT: FT\n                });\n\n              case 4:\n                res = _context2.sent;\n                _context2.next = 7;\n                return res.status;\n\n              case 7:\n                _context2.t0 = _context2.sent;\n\n                if (_context2.t0) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.t0 = {};\n\n              case 10:\n                status = _context2.t0;\n                console.log({\n                  status: status\n                });\n                status == 'success' && setToggle(function (Toggle) {\n                  return !Toggle;\n                });\n                return _context2.abrupt(\"return\", status);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function onSubmit() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(StyledForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, Toggle && __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"It onllllllllllllly works \", status), console.log({\n      errors: errors\n    }), __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Please provide your new password\"), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.new_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"new_password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"confirm_password\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Confirm Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.confirm_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"confirm_password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), __jsx(Button, {\n      onClick: function onClick() {\n        return allTouched();\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Reset\"));\n  });\n};\nvar emptyInitial = {\n  new_password: '',\n  confirm_password: ''\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/ResetForm.js"],"names":["React","Component","useState","Formik","Form","Field","ErrorMessage","TextField","StyledForm","Button","SendForm","Typography","ResetSchema","ResetForm","props","Toggle","setToggle","url","paperId","console","log","emptyInitial","values","handleChange","validateForm","errors","setFieldTouched","handleSubmit","submitForm","allTouched","forEach","key","then","length","onSubmit","FT","res","status","new_password","color","confirm_password","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {ResetSchema} from './FormControl';\n\n\n// async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport const ResetForm = (props) => {\n    const [Toggle, setToggle] = useState(false);\n    const url =  `https://prelude.eurobrake.net/authors/reset/${props.paperId}`;\n    console.log({url})\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            validationSchema={ResetSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm, errors, setFieldTouched, handleSubmit, submitForm }) => {\n\n                const allTouched = async () => {\n                     await Object.keys(values).forEach(key => {   \n                        setFieldTouched(key, true)});\n\n                       await validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())\n                }\n\n\n                const onSubmit = async () => {\n                console.log('click')\n                    let FT = 'reset';\n                  let res =  await SendForm({values, url, FT});\n                  let status = await res.status || {};\n                  console.log({status})\n                  status == 'success' && setToggle(Toggle => !Toggle)\n                  return status\n                }\n\n                return (\n                    <StyledForm>\n                    {Toggle && <h1>It onllllllllllllly works {status}</h1>}\n                    {console.log({errors})}\n                    <Typography className=\"form-title\">Please provide your new password</Typography>\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.new_password}\n                                style={{ color: '#134381' }}\n                                name=\"new_password\"\n                                component={TextField}\n                            />\n                        </div>\n                     \n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"confirm_password\"\n                                className=\"form-label\">\n                                Confirm Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.confirm_password}\n                                style={{ color: '#134381' }}\n                                name=\"confirm_password\"\n                                component={TextField}\n                            />\n                        </div>\n                      \n                        <Button \n                            onClick={() => allTouched()}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Reset\n                        </Button>\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n\n\nconst emptyInitial = {\n    new_password: '',\n    confirm_password: '',\n};\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
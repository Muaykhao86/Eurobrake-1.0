{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport cookie from 'js-cookie';\nexport async function GetForm(url) {\n  const {\n    logintoken\n  } = cookie.get();\n  console.log({\n    logintoken\n  });\n\n  try {\n    const apiUrl = url;\n    const response = await fetch(apiUrl, {\n      credentials: 'include',\n      headers: {\n        Authorization: 'Bearer ' + logintoken\n      }\n    });\n    const data = await response.json();\n\n    if (data.status === 'success') {\n      console.log('getForm', data);\n      console.log('tkn', data.__csrf_token);\n      return data;\n    } else {\n      let error = new Error(data.error);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    console.error('Failed to get form, please try again', error); // return error.message\n  }\n\n  return;\n}\nexport async function SendFile({\n  csrf,\n  file\n}) {\n  const formData = new FormData();\n  const {\n    logintoken\n  } = cookie.get();\n  formData.append('__csrf_token', csrf);\n  formData.append('filename', file);\n  console.log({\n    logintoken,\n    csrf,\n    file\n  });\n\n  if (logintoken && csrf && file) {\n    try {\n      const apiUrl = 'https://prelude.eurobrake.net/upload';\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n        headers: {\n          Authorization: 'Bearer ' + logintoken\n        }\n      });\n      const data = await response.json();\n      await console.log({\n        data\n      });\n\n      if (data.status === 'success') {\n        console.log('getForm', data);\n      } else {\n        let error = new Error(data.error);\n        error.response = response;\n        throw error;\n      }\n    } catch (error) {\n      console.error('Failed to get form, please try again', error); // this.setState({ error: error.message });\n    }\n  }\n\n  return;\n}\nexport async function SendForm({\n  csrf,\n  formData,\n  url\n}) {\n  const form = _JSON$stringify(formData);\n\n  const {\n    logintoken\n  } = cookie.get();\n\n  if (logintoken && csrf && formData) {\n    try {\n      const apiUrl = url;\n      const response = await fetch(apiUrl, {\n        body: form,\n        credentials: 'include',\n        headers: {\n          Authorization: 'Bearer ' + logintoken\n        }\n      });\n      const data = await response.json();\n\n      if (data.status === 'success') {\n        console.log('getForm', data);\n      } else {\n        let error = new Error(data.error);\n        error.response = response;\n        throw error;\n      }\n    } catch (error) {\n      console.error('Failed to get form, please try again', error);\n    }\n  }\n\n  return;\n}","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/FormActions.js"],"names":["cookie","GetForm","url","logintoken","get","console","log","apiUrl","response","fetch","credentials","headers","Authorization","data","json","status","__csrf_token","error","Error","SendFile","csrf","file","formData","FormData","append","method","body","SendForm","form"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie';\n\nexport async function GetForm(url) {\n    const { logintoken } = cookie.get();\n    console.log({ logintoken })\n    try {\n        const apiUrl = url;\n        const response = await fetch(apiUrl, {\n            credentials: 'include',\n            headers: {\n                Authorization: 'Bearer ' + logintoken,\n            }\n        });\n        const data = await response.json();\n        if (data.status === 'success') {\n            console.log('getForm', data);\n            console.log('tkn', data.__csrf_token)\n            return data;\n        } else {\n            let error = new Error(data.error)\n            error.response = response\n            throw error\n        }\n    } catch (error) {\n        console.error(\n            'Failed to get form, please try again', error\n        )\n        // return error.message\n    }\n    return\n}\n\nexport async function SendFile({ csrf, file }) {\n    const formData = new FormData();\n    const { logintoken } = cookie.get();\n    formData.append('__csrf_token', csrf);\n    formData.append('filename', file);\n    console.log({ logintoken, csrf, file })\n    if (logintoken && csrf && file) {\n        try {\n            const apiUrl = 'https://prelude.eurobrake.net/upload';\n            const response = await fetch(apiUrl, {\n                method: 'POST',\n                body: formData,\n                credentials: 'include',\n                headers: {\n                    Authorization: 'Bearer ' + logintoken,\n                }\n            });\n            const data = await response.json();\n            await console.log({ data })\n            if (data.status === 'success') {\n                console.log('getForm', data);\n\n            } else {\n                let error = new Error(data.error)\n                error.response = response\n                throw error\n            }\n        } catch (error) {\n            console.error(\n                'Failed to get form, please try again', error\n            )\n            // this.setState({ error: error.message });\n        }\n    }\n\n    return\n}\n\n\nexport async function SendForm({ csrf, formData, url }) {\n    const form = JSON.stringify(formData);\n    const { logintoken } = cookie.get();\n    if (logintoken && csrf && formData) {\n        try {\n            const apiUrl = url;\n            const response = await fetch(apiUrl, {\n                body: form,\n                credentials: 'include',\n                headers: {\n                    Authorization: 'Bearer ' + logintoken,\n                }\n            });\n            const data = await response.json();\n\n            if (data.status === 'success') {\n                console.log('getForm', data);\n            } else {\n                let error = new Error(data.error)\n                error.response = response\n                throw error\n            }\n        } catch (error) {\n            console.error(\n                'Failed to get form, please try again', error\n            )\n        }\n    }\n    return\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskType/Bio.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik, Field } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox } from 'formik-material-ui';\nimport { Button } from '../../Button';\nimport { SendForm } from '../FormActions';\nimport { StyledTask } from '../TaskStyles';\nimport { BioSchema } from '../TaskControl'; // async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport var Bio = function Bio(props) {\n  var emptyInitial = {\n    biography: ''\n  };\n  var presets = props.presets,\n      csrf = props.csrf,\n      apiUrl = props.apiUrl,\n      paperId = props.paperId,\n      type = props.type;\n  console.log('tasks', presets, csrf, apiUrl, paperId, type);\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: BioSchema,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        setFieldValue = _ref.setFieldValue,\n        isValidating = _ref.isValidating,\n        validateForm = _ref.validateForm,\n        handleSubmit = _ref.handleSubmit,\n        errors = _ref.errors;\n    console.log(errors, 'Tasks');\n\n    var handleCheckBox =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accept, copyright;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                accept = values.accept;\n                copyright = values.copyright;\n                accept === true && setFieldValue('accept', 'yes');\n                accept === false && setFieldValue('accept', '');\n                copyright === true && setFieldValue('copyright', 'yes');\n                copyright === false && setFieldValue('copyright', '');\n                return _context.abrupt(\"return\");\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function handleCheckBox() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var onSubmit = function onSubmit() {\n      values.__csrf_token = csrf;\n      console.log('submitting', values);\n    };\n\n    return __jsx(StyledTask, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(Typography, {\n      className: \"task-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, paperId), __jsx(Typography, {\n      className: \"task-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Biographical information\"), __jsx(Typography, {\n      gutterBottom: true,\n      className: \"task-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Please provide biographical details for \", __jsx(\"span\", {\n      className: \"task_bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \" the author who will be presenting your paper \"), \" at EuroBrake. The session chair will use the biography to introduce the presenter. Please ensure the biography is no more than 100 words. Guidelines and an example biography are provided for reference.\"), __jsx(Typography, {\n      className: \"task-title\",\n      style: {\n        textDecoration: 'underline'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Guidelines for writing your biography\")), __jsx(Typography, {\n      className: \"task-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Presenting Author\"), __jsx(\"div\", {\n      className: \"task-notes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"task-notes-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Biography\"), __jsx(Field, {\n      className: \"task-notes-input\",\n      onClick: handleChange,\n      value: values.author_notes,\n      style: {\n        color: '#134381'\n      },\n      name: \"biography\",\n      component: \"textarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), errors.biography && __jsx(\"label\", {\n      style: {\n        position: 'absolute',\n        bottom: '-1rem',\n        right: '1rem',\n        color: '#ff0000',\n        fontSize: '1.5rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, errors.biography), errors.biography && values.biography && __jsx(\"label\", {\n      style: {\n        position: 'absolute',\n        bottom: '-1rem',\n        right: '1rem',\n        color: '#ff0000',\n        fontSize: '1.5rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, errors.biography)), __jsx(Button, {\n      onClick: function onClick() {\n        return validateForm().then(function (errors) {\n          return _Object$keys(errors).length === 0 && onSubmit();\n        });\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\",\n        color: '#FFF'\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Send\"));\n  });\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskType/Bio.js"],"names":["React","Component","useState","Link","Typography","Formik","Field","TextField","SimpleFileUpload","CheckboxWithLabel","Checkbox","Button","SendForm","StyledTask","BioSchema","Bio","props","emptyInitial","biography","presets","csrf","apiUrl","paperId","type","console","log","values","handleChange","setFieldValue","isValidating","validateForm","handleSubmit","errors","handleCheckBox","accept","copyright","onSubmit","__csrf_token","textDecoration","author_notes","color","position","bottom","right","fontSize","then","length","margin"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,MAAT,EAAkBC,KAAlB,QAAgC,QAAhC;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,iBAAtC,EAAyDC,QAAzD,QAAwE,oBAAxE;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAAQC,SAAR,QAAwB,gBAAxB,C,CAIA;AACA;AACA;;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AAE1B,MAAMC,YAAY,GAAG;AACjBC,IAAAA,SAAS,EAAE;AADM,GAArB;AAF0B,MAOnBC,OAPmB,GAOqBH,KAPrB,CAOnBG,OAPmB;AAAA,MAOVC,IAPU,GAOqBJ,KAPrB,CAOVI,IAPU;AAAA,MAOJC,MAPI,GAOqBL,KAPrB,CAOJK,MAPI;AAAA,MAOIC,OAPJ,GAOqBN,KAPrB,CAOIM,OAPJ;AAAA,MAOaC,IAPb,GAOqBP,KAPrB,CAOaO,IAPb;AAQ1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,OAArB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,OAA5C,EAAqDC,IAArD;AAEA,SACQ,MAAC,MAAD;AACH,IAAA,aAAa,EAAEN,YADZ;AAEH,IAAA,gBAAgB,EAAEH,SAFf;AAGA,IAAA,kBAAkB,MAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKC,gBAA+F;AAAA,QAA5FY,MAA4F,QAA5FA,MAA4F;AAAA,QAApFC,YAAoF,QAApFA,YAAoF;AAAA,QAAtEC,aAAsE,QAAtEA,aAAsE;AAAA,QAAvDC,YAAuD,QAAvDA,YAAuD;AAAA,QAAzCC,YAAyC,QAAzCA,YAAyC;AAAA,QAA3BC,YAA2B,QAA3BA,YAA2B;AAAA,QAAbC,MAAa,QAAbA,MAAa;AAC5FR,IAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ,EAAoB,OAApB;;AACA,QAAMC,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,gBAAAA,MADa,GACJR,MAAM,CAACQ,MADH;AAEbC,gBAAAA,SAFa,GAEDT,MAAM,CAACS,SAFN;AAGnBD,gBAAAA,MAAM,KAAK,IAAX,IAAmBN,aAAa,CAAC,QAAD,EAAW,KAAX,CAAhC;AACAM,gBAAAA,MAAM,KAAK,KAAX,IAAoBN,aAAa,CAAC,QAAD,EAAW,EAAX,CAAjC;AACAO,gBAAAA,SAAS,KAAK,IAAd,IAAsBP,aAAa,CAAC,WAAD,EAAc,KAAd,CAAnC;AACAO,gBAAAA,SAAS,KAAK,KAAd,IAAuBP,aAAa,CAAC,WAAD,EAAc,EAAd,CAApC;AANmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAdK,cAAc;AAAA;AAAA;AAAA,OAApB;;AAUA,QAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBV,MAAAA,MAAM,CAACW,YAAP,GAAsBjB,IAAtB;AACEI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,MAA1B;AACL,KAHC;;AAIA,WACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoCJ,OAApC,CADJ,EAEI,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFJ,EAGI,MAAC,UAAD;AAAY,MAAA,YAAY,MAAxB;AAAyB,MAAA,SAAS,EAAC,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAwF;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAxF,+MAHJ,EAKI,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAmC,MAAA,KAAK,EAAE;AAACgB,QAAAA,cAAc,EAAE;AAAjB,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAzE,CALJ,EAMI,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BANJ,EAOK;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACM,MAAA,OAAO,EAAC,OADd;AAEM,MAAA,SAAS,EAAC,kBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAMI,MAAC,KAAD;AACI,MAAA,SAAS,EAAC,kBADd;AAEI,MAAA,OAAO,EAAEX,YAFb;AAGI,MAAA,KAAK,EAAED,MAAM,CAACa,YAHlB;AAII,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAJX;AAKI,MAAA,IAAI,EAAC,WALT;AAMI,MAAA,SAAS,EAAC,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAcIR,MAAM,CAACd,SAAP,IAAoB;AAAO,MAAA,KAAK,EAAE;AAACuB,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,MAAM,EAAE,OAA/B;AAAwCC,QAAAA,KAAK,EAAE,MAA/C;AAAuDH,QAAAA,KAAK,EAAE,SAA9D;AAAyEI,QAAAA,QAAQ,EAAE;AAAnF,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6GZ,MAAM,CAACd,SAApH,CAdxB,EAeIc,MAAM,CAACd,SAAP,IAAoBQ,MAAM,CAACR,SAA3B,IAAwC;AAAO,MAAA,KAAK,EAAE;AAACuB,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,MAAM,EAAE,OAA/B;AAAwCC,QAAAA,KAAK,EAAE,MAA/C;AAAuDH,QAAAA,KAAK,EAAE,SAA9D;AAAyEI,QAAAA,QAAQ,EAAE;AAAnF,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6GZ,MAAM,CAACd,SAApH,CAf5C,CAPL,EA0BI,MAAC,MAAD;AACI,MAAA,OAAO,EAAE;AAAA,eAAMY,YAAY,GAAGe,IAAf,CAAoB,UAAAb,MAAM;AAAA,iBAAI,aAAYA,MAAZ,EAAoBc,MAApB,KAA+B,CAA/B,IAAoCV,QAAQ,EAAhD;AAAA,SAA1B,CAAN;AAAA,OADb;AAGI,MAAA,MAAM,EAAC,SAHX;AAII,MAAA,UAAU,EAAC,SAJf;AAKI,MAAA,EAAE,EAAC,QALP;AAMI,MAAA,KAAK,EAAE;AAAEW,QAAAA,MAAM,EAAE,MAAV;AAAkBP,QAAAA,KAAK,EAAE;AAAzB,OANX;AAOI,MAAA,OAAO,EAAC,YAPZ;AAQI,MAAA,QAAQ,EAAC,QARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BJ,CADJ;AAyCH,GA9DD,CADR;AAkEH,CA5EM","sourcesContent":["import React, { Component, useState } from 'react'\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik,  Field, } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox} from 'formik-material-ui';\nimport { Button } from '../../Button';\nimport { SendForm } from '../FormActions';\nimport { StyledTask } from '../TaskStyles';\nimport {BioSchema} from '../TaskControl';\n\n\n\n// async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport const Bio = (props) => {\n\n    const emptyInitial = {\n        biography: '',\n        \n    }\n\n    const {presets, csrf, apiUrl, paperId, type} = props;\n    console.log('tasks', presets, csrf, apiUrl, paperId, type);\n    \n    return (\n            <Formik\n         initialValues={emptyInitial}\n         validationSchema={BioSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, setFieldValue, isValidating, validateForm, handleSubmit, errors }) => {\n                console.log(errors, 'Tasks')\n                const handleCheckBox = async () => {\n                    const accept = values.accept;\n                    const copyright = values.copyright;\n                    accept === true && setFieldValue('accept', 'yes')\n                    accept === false && setFieldValue('accept', '')\n                    copyright === true && setFieldValue('copyright', 'yes')\n                    copyright === false && setFieldValue('copyright', '')\n                   return\n                }\n\n                const onSubmit = () => {\n                  values.__csrf_token = csrf\n                    console.log('submitting', values)\n              }\n                return (\n                    <StyledTask>\n                        <Typography className=\"task-title\">{paperId}</Typography>\n                        <Typography className=\"task-title\">Biographical information</Typography>\n                        <Typography gutterBottom className=\"task-label\">Please provide biographical details for <span className=\"task_bold\" > the author who will be presenting your paper </span> at EuroBrake. The session chair will use the biography to introduce the presenter. Please ensure the biography is no more than 100 words. Guidelines and an example biography are provided for reference.</Typography>\n                       \n                        <Typography className=\"task-title\" style={{textDecoration: 'underline'}}><a >Guidelines for writing your biography</a></Typography>\n                        <Typography className=\"task-title\">Presenting Author</Typography>\n                         <div className=\"task-notes\">\n                           <label\n                                 htmlFor=\"label\"\n                                 className=\"task-notes-label\">\n                                 Biography\n                         </label>\n                             <Field\n                                 className=\"task-notes-input\"\n                                 onClick={handleChange}\n                                 value={values.author_notes}\n                                 style={{ color: '#134381' }}\n                                 name=\"biography\"\n                                 component=\"textarea\"\n                             />\n                            {errors.biography && <label style={{position: 'absolute', bottom: '-1rem', right: '1rem', color: '#ff0000', fontSize: '1.5rem'}}>{errors.biography}</label>}\n                            {errors.biography && values.biography && <label style={{position: 'absolute', bottom: '-1rem', right: '1rem', color: '#ff0000', fontSize: '1.5rem'}}>{errors.biography}</label>}\n                            \n                         </div>\n                       \n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                           \n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\", color: '#FFF' }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Send\n                        </Button>\n                        \n                    </StyledTask>\n                )\n            }}\n        </Formik>\n    )\n};\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
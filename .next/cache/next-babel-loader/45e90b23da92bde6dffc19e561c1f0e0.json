{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/utils/auth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport cookies from 'next-cookies';\nimport cookie from 'js-cookie';\nexport const login = ({\n  logintoken\n}) => {\n  cookie.set('logintoken', logintoken, {\n    expires: 1\n  });\n  Router.push('/authorsAreaDash');\n}; // CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n  const {\n    logintoken\n  } = cookies(ctx);\n  console.log('auth', logintoken); // If there's no token, it means the user is not logged in.\n\n  if (!logintoken) {\n    if (ctx.req) {\n      // If `ctx.req` is available it means we are on the server.\n      ctx.res.writeHead(302, {\n        Location: '/authorsArea'\n      });\n      ctx.res.end();\n    } else {\n      // This should only happen on client.\n      Router.push('/authorsArea');\n    }\n  }\n\n  return logintoken;\n}; // LOGOUT FUNCTION\n\nexport const logout = async ctx => {\n  await cookie.remove('logintoken'); // To trigger the event listener we save some random data into the `logout` key\n\n  await window.localStorage.setItem(\"logout\", _Date$now());\n  await Router.push(\"/authorsArea\");\n}; // IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/authorsArea');\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout);\n      return () => {\n        window.removeEventListener('storage', syncLogout);\n        window.localStorage.removeItem('logout');\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const logintoken = auth(ctx); // ! AUTH\n\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread({}, componentProps, {\n      logintoken\n    });\n  };\n\n  return Wrapper;\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/utils/auth.js"],"names":["useEffect","Router","cookies","cookie","login","logintoken","set","expires","push","auth","ctx","console","log","req","res","writeHead","Location","end","logout","remove","window","localStorage","setItem","withAuthSync","WrappedComponent","Wrapper","props","syncLogout","event","key","addEventListener","removeEventListener","removeItem","getInitialProps","componentProps"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAOA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAEtCF,EAAAA,MAAM,CAACG,GAAP,CAAW,YAAX,EAAyBD,UAAzB,EAAqC;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAArC;AACAN,EAAAA,MAAM,CAACO,IAAP,CAAY,kBAAZ;AACD,CAJM,C,CAMP;;AAEA,OAAO,MAAMC,IAAI,GAAGC,GAAG,IAAI;AAEzB,QAAM;AAAEL,IAAAA;AAAF,MAAiBH,OAAO,CAACQ,GAAD,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,UAApB,EAHyB,CAIvB;;AACF,MAAI,CAACA,UAAL,EAAiB;AACf,QAAIK,GAAG,CAACG,GAAR,EAAa;AACX;AACAH,MAAAA,GAAG,CAACI,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAvB;AACAN,MAAAA,GAAG,CAACI,GAAJ,CAAQG,GAAR;AACD,KAJD,MAIO;AACL;AACAhB,MAAAA,MAAM,CAACO,IAAP,CAAY,cAAZ;AACD;AACF;;AAEH,SAAOH,UAAP;AAEC,CAlBM,C,CAoBP;;AAEA,OAAO,MAAMa,MAAM,GAAG,MAAOR,GAAP,IAAe;AAEnC,QAAMP,MAAM,CAACgB,MAAP,CAAc,YAAd,CAAN,CAFmC,CAInC;;AACA,QAAMC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,EAAsC,WAAtC,CAAN;AAEA,QAAMrB,MAAM,CAACO,IAAP,CAAY,cAAZ,CAAN;AACD,CARM,C,CAUP;;AAGA,OAAO,MAAMe,YAAY,GAAGC,gBAAgB,IAAI;AAC9C,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,UAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,UAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AAC1BlB,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAX,QAAAA,MAAM,CAACO,IAAP,CAAY,cAAZ;AACD;AACF,KALD;;AAOAR,IAAAA,SAAS,CAAC,MAAM;AACdoB,MAAAA,MAAM,CAACU,gBAAP,CAAwB,SAAxB,EAAmCH,UAAnC;AAEA,aAAO,MAAM;AACXP,QAAAA,MAAM,CAACW,mBAAP,CAA2B,SAA3B,EAAsCJ,UAAtC;AACAP,QAAAA,MAAM,CAACC,YAAP,CAAoBW,UAApB,CAA+B,QAA/B;AACD,OAHD;AAID,KAPQ,EAON,CAAC,IAAD,CAPM,CAAT;AASA,WAAO,MAAC,gBAAD,eAAsBN,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAlBD;;AAoBAD,EAAAA,OAAO,CAACQ,eAAR,GAA0B,MAAMvB,GAAN,IAAa;AACrC,UAAML,UAAU,GAAGI,IAAI,CAACC,GAAD,CAAvB,CADqC,CACO;;AAC5C,UAAMwB,cAAc,GAClBV,gBAAgB,CAACS,eAAjB,KACC,MAAMT,gBAAgB,CAACS,eAAjB,CAAiCvB,GAAjC,CADP,CADF;AAGA,6BAAYwB,cAAZ;AAA4B7B,MAAAA;AAA5B;AACD,GAND;;AAQA,SAAOoB,OAAP;AACD,CA9BM","sourcesContent":["import { useEffect } from 'react'\nimport Router from 'next/router';\nimport cookies from 'next-cookies';\nimport cookie from 'js-cookie';\n\n\n\n\n\n\nexport const login = ({logintoken} ) => {\n  \n  cookie.set('logintoken', logintoken, { expires: 1 })\n  Router.push('/authorsAreaDash')\n}\n\n// CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n\n  const { logintoken } = cookies(ctx);\n  console.log('auth', logintoken)\n    // If there's no token, it means the user is not logged in.\n  if (!logintoken) {\n    if (ctx.req) {\n      // If `ctx.req` is available it means we are on the server.\n      ctx.res.writeHead(302, { Location: '/authorsArea' })\n      ctx.res.end()\n    } else {\n      // This should only happen on client.\n      Router.push('/authorsArea')\n    }\n  }\n\nreturn logintoken;\n\n}\n\n// LOGOUT FUNCTION\n\nexport const logout = async (ctx) => {\n  \n  await cookie.remove('logintoken')\n \n  // To trigger the event listener we save some random data into the `logout` key\n  await window.localStorage.setItem(\"logout\", Date.now());\n\n  await Router.push(\"/authorsArea\")\n};\n\n// IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!')\n        Router.push('/authorsArea')\n      }\n    }\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout)\n\n      return () => {\n        window.removeEventListener('storage', syncLogout)\n        window.localStorage.removeItem('logout')\n      }\n    }, [null])\n\n    return <WrappedComponent {...props} />\n  }\n\n  Wrapper.getInitialProps = async ctx => {\n    const logintoken = auth(ctx)                // ! AUTH\n    const componentProps =\n      WrappedComponent.getInitialProps &&\n      (await WrappedComponent.getInitialProps(ctx))\n    return { ...componentProps, logintoken }\n  }\n\n  return Wrapper\n}\n"]},"metadata":{},"sourceType":"module"}
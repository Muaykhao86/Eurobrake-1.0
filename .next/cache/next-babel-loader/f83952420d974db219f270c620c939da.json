{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { LoginSchema } from './FormControl';\nimport Link from 'next/link'; // async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport const LoginForm = () => {\n  const {\n    0: Reset,\n    1: setReset\n  } = useState(false);\n  const {\n    0: Toggle,\n    1: setToggle\n  } = useState(false);\n  const {\n    0: Status,\n    1: setStatus\n  } = useState(null);\n  const url = Toggle ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n  console.log({\n    url\n  });\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: LoginSchema,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, ({\n    values,\n    handleChange,\n    validateForm\n  }) => {\n    const onSubmit = async () => {\n      const res = await SendForm({\n        url,\n        values\n      });\n      const data = (await res) && res.status;\n      console.log({\n        status\n      });\n      data && setStatus(data) && setToggle(Toggle => !Toggle);\n      return;\n    };\n\n    return __jsx(StyledForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, Reset && __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Please enter your email to reset your password\"), Toggle && __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, Status), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Email:\"), __jsx(Field, {\n      type: \"email\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.username,\n      style: {\n        color: '#134381'\n      },\n      name: \"username\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), !Reset && __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.password,\n      style: {\n        color: '#134381'\n      },\n      name: \"password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), __jsx(Button, {\n      onClick: () => validateForm().then(errors => _Object$keys(errors).length === 0 && onSubmit()),\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, Reset ? 'Reset' : 'Login'), __jsx(Link, {\n      href: \"/f/[id]/[formType]\",\n      as: `/f/XC8Z3FWxDuQtk68qVs3uwF/reset`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: () => setReset(Reset => !Reset),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, __jsx(Typography, {\n      className: \"form-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \" Forgotten your password?\"))));\n  });\n}; // ? For now im by passin the email link just to check what i have with a reset token\n\nconst emptyInitial = {\n  username: '',\n  password: ''\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js"],"names":["React","Component","useState","Formik","Form","Field","TextField","StyledForm","Button","SendForm","Typography","LoginSchema","Link","LoginForm","Reset","setReset","Toggle","setToggle","Status","setStatus","url","console","log","emptyInitial","values","handleChange","validateForm","onSubmit","res","data","status","username","color","password","then","errors","length","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {LoginSchema} from './FormControl';\nimport Link from 'next/link';\n\n\n// async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport const LoginForm = () => {\n    const [Reset, setReset] = useState(false);\n    const [Toggle, setToggle] = useState(false);\n    const [Status, setStatus] = useState(null);\n\n    const url = Toggle ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n    console.log({url})\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            validationSchema={LoginSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm }) => {\n\n                const onSubmit = async () => {\n                   const res = await SendForm({url, values});\n                   const data = await res && res.status;  \n                   console.log({status})\n                  data && setStatus(data) && setToggle(Toggle => !Toggle)\n                    return              \n              }\n\n                return (\n                    <StyledForm>\n                        {Reset && <Typography className=\"form-title\">Please enter your email to reset your password</Typography>}\n                        {Toggle && <Typography className=\"form-title\">{Status}</Typography>}\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Email:\n                        </label>\n                            <Field\n                                type=\"email\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.username}\n                                style={{ color: '#134381' }}\n                                name=\"username\"\n                                component={TextField}\n                            />\n                        </div>\n                        {!Reset &&\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.password}\n                                style={{ color: '#134381' }}\n                                name=\"password\"\n                                component={TextField}\n                            />\n                        </div>\n                        }\n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            {Reset ? 'Reset' : 'Login'}\n                        </Button>\n                        \n                        <Link\n                            href=\"/f/[id]/[formType]\"\n                            as={`/f/XC8Z3FWxDuQtk68qVs3uwF/reset`} >\n                        <a onClick={() => setReset(Reset => !Reset)}>\n                           <Typography className=\"form-link\"> Forgotten your password?</Typography> \n                        </a>\n                        </Link>\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n// ? For now im by passin the email link just to check what i have with a reset token\n\n\nconst emptyInitial = {\n    username: '',\n    password: '',\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}
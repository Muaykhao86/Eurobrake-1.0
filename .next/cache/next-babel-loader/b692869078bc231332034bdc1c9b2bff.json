{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskType/Bio.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik, Field } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox } from 'formik-material-ui';\nimport { Button } from '../../Button';\nimport { SendForm } from '../FormActions';\nimport { StyledTask } from '../TaskStyles'; // async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport class Bio extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskType: ''\n    }; // todo => depending on the task name I will render the task dynamicly \n    // * will have \n    //   paper\n    //   ppt\n    //   permissions\n    //   poster-accept\n    //   poster\n    //   bio\n    //   pitchvideo\n    // * EACH WILL BE A COMPONENT\n  }\n\n  render() {\n    const emptyInitial = {\n      biography: ''\n    };\n    const {\n      presets,\n      csrf,\n      apiUrl,\n      paperId,\n      type\n    } = this.props;\n    console.log('tasks', presets, csrf, apiUrl, paperId, type);\n    return (// ! NEED PRESETS FOR TASKS\n      __jsx(Formik, {\n        initialValues: emptyInitial,\n        enableReinitialize: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, ({\n        values,\n        handleChange\n      }) => {\n        console.log(values, 'Tasks');\n        return __jsx(StyledTask, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, __jsx(Typography, {\n          className: \"task-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, paperId), __jsx(Typography, {\n          className: \"task-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"Biographical information\"), __jsx(Typography, {\n          gutterBottom: true,\n          className: \"task-label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \"Please provide biographical details for \", __jsx(\"span\", {\n          className: \"task_bold\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \" the author who will be presenting your paper \"), \" at EuroBrake. The session chair will use the biography to introduce the presenter. Please ensure the biography is no more than 100 words. Guidelines and an example biography are provided for reference.\"), __jsx(Typography, {\n          className: \"task-title\",\n          style: {\n            textDecoration: 'underline'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"Guidelines for writing your biography\")), __jsx(Typography, {\n          className: \"task-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Presenting Author\"), __jsx(\"div\", {\n          className: \"task-notes\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, __jsx(\"label\", {\n          htmlFor: \"label\",\n          className: \"task-notes-label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Biography\"), __jsx(Field, {\n          className: \"task-notes-input\",\n          onClick: handleChange,\n          value: values.author_notes,\n          style: {\n            color: '#134381'\n          },\n          name: \"biography\",\n          component: \"textarea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        })), __jsx(Button, {\n          onClick: () => console.log(values),\n          bcolor: \"#134381\",\n          background: \"#134381\",\n          br: \"100rem\",\n          style: {\n            margin: \"3rem\",\n            color: '#FFF'\n          },\n          padding: \".5rem 4rem\",\n          fontSize: \"1.7rem\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Send\"));\n      })\n    );\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskType/Bio.js"],"names":["React","Component","useState","Link","Typography","Formik","Field","TextField","SimpleFileUpload","CheckboxWithLabel","Checkbox","Button","SendForm","StyledTask","Bio","constructor","props","state","taskType","render","emptyInitial","biography","presets","csrf","apiUrl","paperId","type","console","log","values","handleChange","textDecoration","author_notes","color","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik,  Field, } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox} from 'formik-material-ui';\nimport { Button } from '../../Button';\nimport { SendForm } from '../FormActions';\nimport { StyledTask } from '../TaskStyles';\n\n\n\n// async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport class Bio extends Component{\nconstructor(props) {\n    super(props);\n    this.state = {\n        taskType: ''\n    }\n    // todo => depending on the task name I will render the task dynamicly \n    // * will have \n    //   paper\n    //   ppt\n    //   permissions\n    //   poster-accept\n    //   poster\n    //   bio\n    //   pitchvideo\n    // * EACH WILL BE A COMPONENT\n}\n\nrender(){\n    const emptyInitial = {\n        biography: ''\n    }\n\n    const {presets, csrf, apiUrl, paperId, type} = this.props;\n    console.log('tasks', presets, csrf, apiUrl, paperId, type);\n    \n    return (\n        // ! NEED PRESETS FOR TASKS\n\n\n        <Formik\n         initialValues={emptyInitial}\n            enableReinitialize\n        >\n            {({ values, handleChange}) => {\n                console.log(values, 'Tasks')\n                return (\n                    <StyledTask>\n                        <Typography className=\"task-title\">{paperId}</Typography>\n                        <Typography className=\"task-title\">Biographical information</Typography>\n                        <Typography gutterBottom className=\"task-label\">Please provide biographical details for <span className=\"task_bold\" > the author who will be presenting your paper </span> at EuroBrake. The session chair will use the biography to introduce the presenter. Please ensure the biography is no more than 100 words. Guidelines and an example biography are provided for reference.</Typography>\n                       \n                        <Typography className=\"task-title\" style={{textDecoration: 'underline'}}><a >Guidelines for writing your biography</a></Typography>\n                        <Typography className=\"task-title\">Presenting Author</Typography>\n                         <div className=\"task-notes\">\n                           <label\n                                 htmlFor=\"label\"\n                                 className=\"task-notes-label\">\n                                 Biography\n                         </label>\n                             <Field\n                                 className=\"task-notes-input\"\n                                 onClick={handleChange}\n                                 value={values.author_notes}\n                                 style={{ color: '#134381' }}\n                                 name=\"biography\"\n                                 component=\"textarea\"\n                             />\n                         </div>\n                        {/* <Typography className=\"task-title\">Presenting Author</Typography> */}\n                       \n                        <Button \n                            onClick={() => console.log(values)}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\", color: '#FFF' }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Send\n                        </Button>\n                        \n                    </StyledTask>\n                )\n            }}\n        </Formik>\n    )\n};\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
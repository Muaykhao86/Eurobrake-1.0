{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/ResetForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { ResetSchema } from './FormControl'; // async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport var ResetForm = function ResetForm(props) {\n  var _useState = useState(false),\n      Toggle = _useState[0],\n      setToggle = _useState[1];\n\n  var url = \"https://prelude.eurobrake.net/authors/reset/\".concat(props.paperId);\n  console.log({\n    url: url\n  });\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: ResetSchema,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        validateForm = _ref.validateForm,\n        errors = _ref.errors,\n        setTouched = _ref.setTouched;\n\n    var onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setTouched();\n                console.log('click');\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function onSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(StyledForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, Toggle && __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"It onllllllllllllly works \", status), console.log({\n      errors: errors\n    }), __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Please provide your new password\"), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Password:\"), __jsx(Field, {\n      disallow_autocomplete: \"1\",\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.new_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"new_password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"confirm_password\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Confirm Password:\"), __jsx(Field, {\n      disallow_autocomplete: \"1\",\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.confirm_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"confirm_password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), __jsx(Button, {\n      onClick: function onClick() {\n        return validateForm().then(function (errors) {\n          return _Object$keys(errors).length === 0 && onSubmit();\n        });\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Reset\"));\n  });\n};\nvar emptyInitial = {\n  new_password: '',\n  confirm_password: ''\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/ResetForm.js"],"names":["React","Component","useState","Formik","Form","Field","ErrorMessage","TextField","StyledForm","Button","SendForm","Typography","ResetSchema","ResetForm","props","Toggle","setToggle","url","paperId","console","log","emptyInitial","values","handleChange","validateForm","errors","setTouched","onSubmit","status","new_password","color","confirm_password","then","length","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {ResetSchema} from './FormControl';\n\n\n// async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport const ResetForm = (props) => {\n    const [Toggle, setToggle] = useState(false);\n    const url =  `https://prelude.eurobrake.net/authors/reset/${props.paperId}`;\n    console.log({url})\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            validationSchema={ResetSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm, errors, setTouched }) => {\n\n                const onSubmit = async () => {\n                setTouched()\n                console.log('click')\n                  {/* let res =  await SendForm({values, url});\n                  let status = await res.status;\n                  console.log({status})\n                  data.status == 'success' && setToggle(Toggle => !Toggle)\n                  return status */}\n                }\n\n                return (\n                    <StyledForm>\n                    {Toggle && <h1>It onllllllllllllly works {status}</h1>}\n                    {console.log({errors})}\n                    <Typography className=\"form-title\">Please provide your new password</Typography>\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                disallow_autocomplete='1'\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.new_password}\n                                style={{ color: '#134381' }}\n                                name=\"new_password\"\n                                component={TextField}\n                            />\n                        </div>\n                     \n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"confirm_password\"\n                                className=\"form-label\">\n                                Confirm Password:\n                        </label>\n                            <Field\n                                disallow_autocomplete='1'\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.confirm_password}\n                                style={{ color: '#134381' }}\n                                name=\"confirm_password\"\n                                component={TextField}\n                            />\n                        </div>\n                      \n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Reset\n                        </Button>\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n\n\nconst emptyInitial = {\n    new_password: '',\n    confirm_password: '',\n};\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
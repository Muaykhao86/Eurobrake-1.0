{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { LoginSchema } from './FormControl';\nimport Link from 'next/link'; // async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport var LoginForm = function LoginForm() {\n  var _useState = useState(false),\n      Toggle = _useState[0],\n      setToggle = _useState[1];\n\n  var url = Toggle ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n  console.log({\n    url: url\n  });\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: LoginSchema,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        validateForm = _ref.validateForm;\n\n    var onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return SendForm({\n                  url: url,\n                  values: values\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function onSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(StyledForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, Toggle && __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Please enter your email to reset your password\"), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Email:\"), __jsx(Field, {\n      type: \"email\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.username,\n      style: {\n        color: '#134381'\n      },\n      name: \"username\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })), !Toggle && __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.password,\n      style: {\n        color: '#134381'\n      },\n      name: \"password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })), __jsx(Button, {\n      onClick: function onClick() {\n        return validateForm().then(function (errors) {\n          return _Object$keys(errors).length === 0 && onSubmit();\n        });\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, Toggle ? 'Reset' : 'Login'), __jsx(Link, {\n      href: \"/f/[id]/[formType]\",\n      as: \"/f/XC8Z3FWxDuQtk68qVs3uwF/reset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: function onClick() {\n        return setToggle(function (Toggle) {\n          return !Toggle;\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, __jsx(Typography, {\n      className: \"form-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \" Forgotten your password?\"))));\n  });\n}; // ? For now im by passin the email link just to check what i have with a reset token\n\nvar emptyInitial = {\n  username: '',\n  password: ''\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js"],"names":["React","Component","useState","Formik","Form","Field","TextField","StyledForm","Button","SendForm","Typography","LoginSchema","Link","LoginForm","Toggle","setToggle","url","console","log","emptyInitial","values","handleChange","validateForm","onSubmit","username","color","password","then","errors","length","margin"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAqC,QAArC;AACA,SAASC,SAAT,QAAyB,oBAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAGA;AACA;AACA;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,kBACCX,QAAQ,CAAC,KAAD,CADT;AAAA,MACpBY,MADoB;AAAA,MACZC,SADY;;AAE3B,MAAMC,GAAG,GAAGF,MAAM,GAAG,6CAAH,GAAmD,6CAArE;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA,GAAG,EAAHA;AAAD,GAAZ;AACA,SACI,MAAC,MAAD;AACI,IAAA,aAAa,EAAEG,YADnB;AAEI,IAAA,gBAAgB,EAAER,WAFtB;AAGI,IAAA,kBAAkB,MAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKK,gBAA4C;AAAA,QAAzCS,MAAyC,QAAzCA,MAAyC;AAAA,QAAjCC,YAAiC,QAAjCA,YAAiC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;;AAEzC,QAAMC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACPd,QAAQ,CAAC;AAACO,kBAAAA,GAAG,EAAHA,GAAD;AAAMI,kBAAAA,MAAM,EAANA;AAAN,iBAAD,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAARG,QAAQ;AAAA;AAAA;AAAA,OAAd;;AAIA,WACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,MAAM,IAAI,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADf,EAGI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,OAAO,EAAC,OADZ;AAEI,MAAA,SAAS,EAAC,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAMI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,SAAS,EAAC,YAFd;AAGI,MAAA,OAAO,EAAEO,YAHb;AAII,MAAA,KAAK,EAAED,MAAM,CAACI,QAJlB;AAKI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OALX;AAMI,MAAA,IAAI,EAAC,UANT;AAOI,MAAA,SAAS,EAAEnB,SAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CAHJ,EAmBK,CAACQ,MAAD,IACD;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,OAAO,EAAC,OADZ;AAEI,MAAA,SAAS,EAAC,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAMI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,SAAS,EAAC,YAFd;AAGI,MAAA,OAAO,EAAEO,YAHb;AAII,MAAA,KAAK,EAAED,MAAM,CAACM,QAJlB;AAKI,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAE;AAAT,OALX;AAMI,MAAA,IAAI,EAAC,UANT;AAOI,MAAA,SAAS,EAAEnB,SAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CApBJ,EAqCI,MAAC,MAAD;AACI,MAAA,OAAO,EAAE;AAAA,eAAMgB,YAAY,GAAGK,IAAf,CAAoB,UAAAC,MAAM;AAAA,iBAAI,aAAYA,MAAZ,EAAoBC,MAApB,KAA+B,CAA/B,IAAoCN,QAAQ,EAAhD;AAAA,SAA1B,CAAN;AAAA,OADb;AAEI,MAAA,MAAM,EAAC,SAFX;AAGI,MAAA,UAAU,EAAC,SAHf;AAII,MAAA,EAAE,EAAC,QAJP;AAKI,MAAA,KAAK,EAAE;AAAEO,QAAAA,MAAM,EAAE;AAAV,OALX;AAMI,MAAA,OAAO,EAAC,YANZ;AAOI,MAAA,QAAQ,EAAC,QAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQKhB,MAAM,GAAG,OAAH,GAAa,OARxB,CArCJ,EAgDI,MAAC,IAAD;AACI,MAAA,IAAI,EAAC,oBADT;AAEI,MAAA,EAAE,mCAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA;AAAG,MAAA,OAAO,EAAE;AAAA,eAAMC,SAAS,CAAC,UAAAD,MAAM;AAAA,iBAAI,CAACA,MAAL;AAAA,SAAP,CAAf;AAAA,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADH,CAHA,CAhDJ,CADJ;AA0DH,GArEL,CADJ;AAyEH,CA7EM,C,CA8EP;;AAGA,IAAMK,YAAY,GAAG;AACjBK,EAAAA,QAAQ,EAAE,EADO;AAEjBE,EAAAA,QAAQ,EAAE;AAFO,CAArB","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {LoginSchema} from './FormControl';\nimport Link from 'next/link';\n\n\n// async (values, actions) => {\n//                 await SendForm({ values, url })\n//             }\n\nexport const LoginForm = () => {\n    const [Toggle, setToggle] = useState(false);\n    const url = Toggle ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n    console.log({url})\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            validationSchema={LoginSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm }) => {\n\n                const onSubmit = async () => {\n                    await SendForm({url, values})\n                }\n\n                return (\n                    <StyledForm>\n                        {Toggle && <Typography className=\"form-title\">Please enter your email to reset your password</Typography>}\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Email:\n                        </label>\n                            <Field\n                                type=\"email\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.username}\n                                style={{ color: '#134381' }}\n                                name=\"username\"\n                                component={TextField}\n                            />\n                        </div>\n                        {!Toggle &&\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.password}\n                                style={{ color: '#134381' }}\n                                name=\"password\"\n                                component={TextField}\n                            />\n                        </div>\n                        }\n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            {Toggle ? 'Reset' : 'Login'}\n                        </Button>\n                        \n                        <Link\n                            href=\"/f/[id]/[formType]\"\n                            as={`/f/XC8Z3FWxDuQtk68qVs3uwF/reset`} >\n                        <a onClick={() => setToggle(Toggle => !Toggle)}>\n                           <Typography className=\"form-link\"> Forgotten your password?</Typography> \n                        </a>\n                        </Link>\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n// ? For now im by passin the email link just to check what i have with a reset token\n\n\nconst emptyInitial = {\n    username: '',\n    password: '',\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}
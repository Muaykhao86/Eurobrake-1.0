{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskType/PPT.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik, Field } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox } from 'formik-material-ui';\nimport { Button } from '../../Button';\nimport { SendForm } from '../FormActions';\nimport { StyledTask } from '../TaskStyles';\nimport { PPTSchema } from '../TaskControl'; // async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport var PPT = function PPT(props) {\n  var emptyInitial = {\n    accept: '',\n    ppt_filename: '',\n    author_notes: ''\n  };\n  var presets = props.presets,\n      csrf = props.csrf,\n      apiUrl = props.apiUrl,\n      paperId = props.paperId,\n      type = props.type;\n  console.log('tasks', presets, csrf, apiUrl, paperId, type);\n  var url = \"https://prelude.eurobrake.net/authors/tasks/paper/\".concat(paperId);\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: PPTSchema,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        setFieldValue = _ref.setFieldValue,\n        isValidating = _ref.isValidating,\n        validateForm = _ref.validateForm,\n        handleSubmit = _ref.handleSubmit,\n        errors = _ref.errors;\n\n    var handleCheckBox =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var accept, copyright;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                accept = values.accept;\n                copyright = values.copyright;\n                accept === true && setFieldValue('accept', 'yes');\n                accept === false && setFieldValue('accept', '');\n                copyright === true && setFieldValue('copyright', 'yes');\n                copyright === false && setFieldValue('copyright', '');\n                return _context.abrupt(\"return\");\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function handleCheckBox() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var onSubmit = function onSubmit() {\n      values.__csrf_token = csrf;\n      console.log('submitting', values);\n    };\n\n    console.log(errors);\n    return __jsx(StyledTask, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, __jsx(Typography, {\n      className: \"task-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, paperId), __jsx(Typography, {\n      className: \"task-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Please upload your PowerPoint persentation using the form below\"), __jsx(\"div\", {\n      className: \"task-checkboxField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"task-checkboxField-label\",\n      style: {\n        color: '#134381'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"I have read the \", __jsx(Link, {\n      href: \"/authorsAreaInstructions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"task-link_bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Instructions for Preparing your Powerpoint Presentation\")), \" and have followed the guidance notes available there.\"), __jsx(Field, {\n      className: \"task-checkboxField-box\",\n      value: values.accept,\n      style: {\n        color: '#134381'\n      },\n      name: \"accept\",\n      component: CheckboxWithLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, errors.accept && __jsx(\"label\", {\n      style: {\n        position: 'absolute',\n        bottom: '-1rem',\n        right: '1rem',\n        color: '#ff0000',\n        fontSize: '1.5rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, errors.accept))), __jsx(\"div\", {\n      className: \"task-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"task-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"File upload\"), __jsx(Field, {\n      className: \"task-input\",\n      value: values.ppt_filename,\n      style: {\n        color: '#134381'\n      },\n      name: \"ppt_filename\",\n      component: SimpleFileUpload,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), errors.ppt_filename && __jsx(\"label\", {\n      style: {\n        position: 'absolute',\n        bottom: '-2rem',\n        right: '1rem',\n        color: '#ff0000',\n        fontSize: '1.5rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, errors.ppt_filename)), __jsx(\"div\", {\n      className: \"task-notes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"task-notes-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Notes for reviewers:\"), __jsx(Field, {\n      className: \"task-notes-input\",\n      onClick: handleChange,\n      value: values.author_notes,\n      style: {\n        color: '#134381'\n      },\n      name: \"author_notes\",\n      component: \"textarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), __jsx(Button, {\n      onClick: function onClick() {\n        return validateForm().then(function (errors) {\n          return _Object$keys(errors).length === 0 && onSubmit();\n        });\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\",\n        color: '#FFF'\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Send\"));\n  });\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskType/PPT.js"],"names":["React","Component","useState","Link","Typography","Formik","Field","TextField","SimpleFileUpload","CheckboxWithLabel","Checkbox","Button","SendForm","StyledTask","PPTSchema","PPT","props","emptyInitial","accept","ppt_filename","author_notes","presets","csrf","apiUrl","paperId","type","console","log","url","values","handleChange","setFieldValue","isValidating","validateForm","handleSubmit","errors","handleCheckBox","copyright","onSubmit","__csrf_token","color","position","bottom","right","fontSize","then","length","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport Link from 'next/link';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik,  Field, } from 'formik';\nimport { TextField, SimpleFileUpload, CheckboxWithLabel, Checkbox} from 'formik-material-ui';\nimport { Button } from '../../Button';\nimport { SendForm } from '../FormActions';\nimport { StyledTask } from '../TaskStyles';\nimport {PPTSchema} from '../TaskControl';\n\n\n\n\n// async (values, actions) => {\n//                 await Sendtask({ values, url })\n//             }\n\nexport const PPT = (props) => {\n\n\n    const emptyInitial = {\n        accept: '',\n        ppt_filename: '',\n        author_notes: ''\n    }\n\n    const {presets, csrf, apiUrl, paperId, type} = props;\n    console.log('tasks', presets, csrf, apiUrl, paperId, type);\n    const url = `https://prelude.eurobrake.net/authors/tasks/paper/${paperId}`;\n    \n    \n    return (\n        <Formik\n         initialValues={emptyInitial}\n            validationSchema={PPTSchema}\n\n            enableReinitialize\n        >\n            {({ values, handleChange, setFieldValue, isValidating, validateForm, handleSubmit, errors }) => {\n                 const handleCheckBox = async () => {\n                    const accept = values.accept;\n                    const copyright = values.copyright;\n                    accept === true && setFieldValue('accept', 'yes')\n                    accept === false && setFieldValue('accept', '')\n                    copyright === true && setFieldValue('copyright', 'yes')\n                    copyright === false && setFieldValue('copyright', '')\n                   return\n                }\n\n                const onSubmit = () => {\n                  values.__csrf_token = csrf\n                    console.log('submitting', values)\n              }\n              console.log(errors)\n                return (\n                    <StyledTask>\n                        <Typography className=\"task-title\">{paperId}</Typography>\n                        <Typography className=\"task-title\">Please upload your PowerPoint persentation using the form below</Typography>\n                         <div className=\"task-checkboxField\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"task-checkboxField-label\"\n                                style={{ color: '#134381' }}\n\n                                >\n                                I have read the <Link href=\"/authorsAreaInstructions\"><a className=\"task-link_bold\" >Instructions for Preparing your Powerpoint Presentation</a></Link> and have followed the guidance notes available there.\n                        </label>\n                            <Field\n                                className=\"task-checkboxField-box\"\n                                value={values.accept}\n                                style={{ color: '#134381', }}\n                                name=\"accept\"\n                                component={CheckboxWithLabel}\n                            >\n                            {errors.accept && <label style={{position: 'absolute', bottom: '-1rem', right: '1rem', color: '#ff0000', fontSize: '1.5rem'}}>{errors.accept}</label>}\n                            </Field>\n                        </div>\n                         <div className=\"task-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"task-label\">\n                                File upload\n                        </label>\n                            <Field\n                                className=\"task-input\"\n                                value={values.ppt_filename}\n                                style={{ color: '#134381' }}\n                                name=\"ppt_filename\"\n                                component={SimpleFileUpload}\n                                fullWidth\n                            />\n                            {errors.ppt_filename && <label style={{position: 'absolute', bottom: '-2rem', right: '1rem', color: '#ff0000', fontSize: '1.5rem'}}>{errors.ppt_filename}</label>}\n                        </div>\n                         <div className=\"task-notes\">\n                           <label\n                                 htmlFor=\"label\"\n                                 className=\"task-notes-label\">\n                                 Notes for reviewers:\n                         </label>\n                             <Field\n                                 className=\"task-notes-input\"\n                                 onClick={handleChange}\n                                 value={values.author_notes}\n                                 style={{ color: '#134381' }}\n                                 name=\"author_notes\"\n                                 component=\"textarea\"\n                             />\n                         </div>\n                       \n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\", color: '#FFF' }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Send\n                        </Button>\n                        \n                    </StyledTask>\n                )\n            }}\n        </Formik>\n    )\n};\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
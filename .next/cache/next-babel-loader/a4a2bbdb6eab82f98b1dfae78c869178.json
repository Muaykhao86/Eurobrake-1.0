{"ast":null,"code":"import * as yup from 'yup';\nexport var PaperSchema = yup.object().shape({\n  accept: yup.bool().test('accept', 'Field must be checked', function (value) {\n    return value === true;\n  }).required('Required'),\n  technicalpaper_filename: yup.mixed().required('Required').test(\"fileFormat\", \"Unsupported Format\", function (value) {\n    return value && PDF_SUPPORTED_FORMATS.includes(value.type);\n  }),\n  author_notes: yup.string(),\n  copyright: yup.bool().test('copyright', 'Field must be checked', function (value) {\n    return value === true;\n  }).required('Required')\n});\nvar PDF_SUPPORTED_FORMATS = ['application/pdf'];\nexport var PPTSchema = yup.object().shape({\n  accept: yup.bool().test('accept', 'Field must be checked', function (value) {\n    return value === true;\n  }).required('Required'),\n  ppt_filename: yup.mixed().required('Required').test(\"fileFormat\", \"Unsupported Format\", function (value) {\n    return value && PPT_SUPPORTED_FORMATS.includes(value.type);\n  }),\n  author_notes: yup.string()\n});\nvar PPT_SUPPORTED_FORMATS = ['\tapplication/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'];\nexport var PermissionSchema = yup.object().shape({\n  ok_to_publish_ppt: yup.string().required('Required')\n});\nexport var PitchVideoSchema = yup.object().shape({\n  pitchvideo_filename: yup.mixed().required('Required').test(\"fileFormat\", \"Unsupported Format\", function (value) {\n    return value && PPT_SUPPORTED_FORMATS.includes(value.type);\n  }),\n  ok_to_publish_pitchvideo: yup.string().required('Required')\n});\nexport var AcceptPosterSchema = yup.object().shape({\n  accept_poster_invitation: yup.string().required('Required')\n});\nexport var PosterSchema = yup.object().shape({\n  accept: yup.bool().test('accept', 'Field must be checked', function (value) {\n    return value === true;\n  }).required('Required'),\n  poster_filename: yup.mixed().required('Required').test(\"fileFormat\", \"Unsupported Format\", function (value) {\n    return value && PPT_SUPPORTED_FORMATS.includes(value.type);\n  }),\n  author_notes: yup.string(),\n  ok_to_publish_poster: yup.string().required('Required')\n});\nexport var BioSchema = yup.object().shape({\n  accept: yup.bool().test('accept', 'Field must be checked', function (value) {\n    return value === true;\n  }).required('Required'),\n  poster_filename: yup.mixed().required('Required').test(\"fileFormat\", \"Unsupported Format\", function (value) {\n    return value && PPT_SUPPORTED_FORMATS.includes(value.type);\n  }),\n  author_notes: yup.string()\n});","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/TaskControl.js"],"names":["yup","PaperSchema","object","shape","accept","bool","test","value","required","technicalpaper_filename","mixed","PDF_SUPPORTED_FORMATS","includes","type","author_notes","string","copyright","PPTSchema","ppt_filename","PPT_SUPPORTED_FORMATS","PermissionSchema","ok_to_publish_ppt","PitchVideoSchema","pitchvideo_filename","ok_to_publish_pitchvideo","AcceptPosterSchema","accept_poster_invitation","PosterSchema","poster_filename","ok_to_publish_poster","BioSchema"],"mappings":"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","sourcesContent":["import * as yup from 'yup';\n\nexport const PaperSchema = yup.object().shape({\n    accept: \n     yup.bool()\n      .test(\n        'accept',\n        'Field must be checked',\n        value => value === true\n      ).required('Required')\n    ,\n    technicalpaper_filename: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && PDF_SUPPORTED_FORMATS.includes(value.type)),\n    author_notes: yup.string(),\n    copyright: yup.bool()\n      .test(\n        'copyright',\n        'Field must be checked',\n        value => value === true\n      ).required('Required')\n})\n \n\n  const PDF_SUPPORTED_FORMATS = [\n     'application/pdf'\n    ];\n\nexport const PPTSchema = yup.object().shape({\n    accept: \n     yup.bool()\n      .test(\n        'accept',\n        'Field must be checked',\n        value => value === true\n      ).required('Required')\n    ,\n    ppt_filename: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && PPT_SUPPORTED_FORMATS.includes(value.type)),\n    author_notes: yup.string()\n})\n  \n  const PPT_SUPPORTED_FORMATS = [\n            '\tapplication/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\n    ];\n\n\nexport const PermissionSchema = yup.object().shape({\n    ok_to_publish_ppt: yup.string()\n    .required('Required')\n})\n  \nexport const PitchVideoSchema = yup.object().shape({\n  pitchvideo_filename: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && PPT_SUPPORTED_FORMATS.includes(value.type)),\n    ok_to_publish_pitchvideo: yup.string()\n    .required('Required')\n})\n\n\nexport const AcceptPosterSchema = yup.object().shape({\n    accept_poster_invitation: yup.string()\n    .required('Required')\n})\n\nexport const PosterSchema = yup.object().shape({\n    accept: \n     yup.bool()\n      .test(\n        'accept',\n        'Field must be checked',\n        value => value === true\n      ).required('Required')\n    ,\n    poster_filename: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && PPT_SUPPORTED_FORMATS.includes(value.type)),\n    author_notes: yup.string(),\n      ok_to_publish_poster: yup.string()\n      .required('Required')\n})\n\nexport const BioSchema = yup.object().shape({\n    accept: \n     yup.bool()\n      .test(\n        'accept',\n        'Field must be checked',\n        value => value === true\n      ).required('Required')\n    ,\n    poster_filename: yup.mixed().required('Required')\n    .test(\"fileFormat\",\n          \"Unsupported Format\",\n          value => value && PPT_SUPPORTED_FORMATS.includes(value.type)),\n    author_notes: yup.string(),\n     \n     \n})\n"]},"metadata":{},"sourceType":"module"}
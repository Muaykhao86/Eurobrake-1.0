{"ast":null,"code":"var _jsxFileName = \"/Users/danielhardiman/Desktop/Eurobrake-1.0/components/forms/ResetForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { ResetSchema } from './FormControl'; // *Reset form is fine from here\n\nexport const ResetForm = props => {\n  const {\n    0: Toggle,\n    1: setToggle\n  } = useState(false);\n  const {\n    0: Loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: Status,\n    1: setStatus\n  } = useState(null);\n  const url = `https://prelude.eurobrake.net/authors/reset/${props.paperId}`;\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: ResetSchema,\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    handleChange,\n    validateForm,\n    errors,\n    setFieldTouched,\n    handleSubmit,\n    submitForm\n  }) => {\n    const allTouched = async () => {\n      await Object.keys(values).forEach(key => {\n        setFieldTouched(key, true);\n      });\n      await validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit());\n    };\n\n    const onSubmit = async () => {\n      let FT = 'reset';\n      let res = await SendForm({\n        values,\n        url,\n        FT\n      });\n      let data = await res;\n      let dataStatus = (await data) && data.status;\n      setStatus(dataStatus);\n      console.log({\n        data\n      });\n\n      let result = async () => {\n        await setLoading(false);\n        await setToggle(true);\n      };\n\n      return result();\n    };\n\n    return __jsx(StyledForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      className: \"form-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"Please provide your new password\"), __jsx(\"div\", {\n      className: \"form-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.new_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"new_password\",\n      component: TextField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    })), __jsx(\"div\", {\n      className: \"form-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"confirm_password\",\n      className: \"form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, \"Confirm Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.confirm_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"confirm_password\",\n      component: TextField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    })), Loading ? __jsx(CircularProgress, {\n      size: 24,\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }\n    }) : __jsx(Button, {\n      onClick: () => allTouched(),\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, \"Reset\"), Toggle && __jsx(Typography, {\n      gutterBottom: true,\n      className: \"form-title\",\n      style: {\n        alignSelf: 'center',\n        textTransform: 'uppercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }\n    }, Status));\n  });\n};\nconst emptyInitial = {\n  new_password: '',\n  confirm_password: ''\n};","map":{"version":3,"sources":["/Users/danielhardiman/Desktop/Eurobrake-1.0/components/forms/ResetForm.js"],"names":["React","Component","useState","Formik","Form","Field","ErrorMessage","TextField","StyledForm","Button","CircularProgress","SendForm","Typography","ResetSchema","ResetForm","props","Toggle","setToggle","Loading","setLoading","Status","setStatus","url","paperId","emptyInitial","values","handleChange","validateForm","errors","setFieldTouched","handleSubmit","submitForm","allTouched","Object","keys","forEach","key","then","length","onSubmit","FT","res","data","dataStatus","status","console","log","result","new_password","color","confirm_password","margin","alignSelf","textTransform"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {ResetSchema} from './FormControl';\n\n\n// *Reset form is fine from here\n\nexport const ResetForm = (props) => {\n    const [Toggle, setToggle] = useState(false);\n  const [Loading, setLoading] = useState(false);\n\n    const [Status, setStatus] = useState(null);\n\n    const url =  `https://prelude.eurobrake.net/authors/reset/${props.paperId}`;\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            validationSchema={ResetSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm, errors, setFieldTouched, handleSubmit, submitForm }) => {\n\n                const allTouched = async () => {\n                     await Object.keys(values).forEach(key => {   \n                        setFieldTouched(key, true)});\n\n                       await validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())\n                }\n\n\n                const onSubmit = async () => {\n                    let FT = 'reset';\n                  let res =  await SendForm({values, url, FT});\n                  let data = await  res;\n                  let dataStatus= await  data && data.status;\n                  setStatus(dataStatus)\n                  console.log({data})\n                  let result = async () => {\n                  await  setLoading(false)\n                  await setToggle(true)\n                   }    \n                  \n                return result() \n                }\n\n                return (\n                    <StyledForm>\n                    <Typography className=\"form-title\">Please provide your new password</Typography>\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.new_password}\n                                style={{ color: '#134381' }}\n                                name=\"new_password\"\n                                component={TextField}\n                            />\n                        </div>\n                     \n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"confirm_password\"\n                                className=\"form-label\">\n                                Confirm Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.confirm_password}\n                                style={{ color: '#134381' }}\n                                name=\"confirm_password\"\n                                component={TextField}\n                            />\n                        </div>\n                        {Loading ?  <CircularProgress size={24} className=\"loading\"/> : \n                        <Button \n                            onClick={() => allTouched()}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Reset\n                        </Button>}\n                    {Toggle && <Typography gutterBottom className=\"form-title\" style={{alignSelf: 'center',textTransform: 'uppercase'}}>{Status}</Typography>}\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n\n\nconst emptyInitial = {\n    new_password: '',\n    confirm_password: '',\n};\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
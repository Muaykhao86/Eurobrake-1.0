{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/utils/auth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie'; // CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx);\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/login'\n    });\n    ctx.res.end();\n    return;\n  }\n\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n}; // IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n// Gets the display name of a JSX component for dev tools\n\nconst getDisplayName = Component => Component.displayName || Component.name || 'Component';\n\nexport const withAuthSync = WrappedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const token = auth(ctx); //Check token is valid here\n\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread({}, componentProps, {\n        token\n      });\n    }\n\n    render() {\n      return __jsx(WrappedComponent, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n}; // LOGOUT FUNCTION\n\nexport const logout = () => {\n  cookie.remove(\"token\"); // To trigger the event listener we save some random data into the `logout` key\n\n  window.localStorage.setItem(\"logout\", _Date$now());\n  Router.push(\"/login\");\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/utils/auth.js"],"names":["Component","Router","nextCookie","cookie","auth","ctx","token","req","res","writeHead","Location","end","push","getDisplayName","displayName","name","withAuthSync","WrappedComponent","getInitialProps","componentProps","render","props","logout","remove","window","localStorage","setItem"],"mappings":";;;;;;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAGA;;AAEA,OAAO,MAAMC,IAAI,GAAGC,GAAG,IAAI;AACvB,QAAM;AAACC,IAAAA;AAAD,MAAUJ,UAAU,CAACG,GAAD,CAA1B;;AAEA,MAAGA,GAAG,CAACE,GAAJ,IAAW,CAACD,KAAf,EAAsB;AAClBD,IAAAA,GAAG,CAACG,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAvB;AACAL,IAAAA,GAAG,CAACG,GAAJ,CAAQG,GAAR;AACA;AACH;;AACD,MAAG,CAACL,KAAJ,EAAW;AACPL,IAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;AACH;;AAED,SAAON,KAAP;AACH,CAbM,C,CAgBP;AAGA;;AACA,MAAMO,cAAc,GAAGb,SAAS,IAC9BA,SAAS,CAACc,WAAV,IAAyBd,SAAS,CAACe,IAAnC,IAA2C,WAD7C;;AAGA,OAAO,MAAMC,YAAY,GAAGC,gBAAgB;AAAA;;AAAA,0BAC1C,cAAcjB,SAAd,CAAwB;AAGtB,iBAAakB,eAAb,CAA8Bb,GAA9B,EAAmC;AACjC,YAAMC,KAAK,GAAGF,IAAI,CAACC,GAAD,CAAlB,CADiC,CACV;;AAEvB,YAAMc,cAAc,GAClBF,gBAAgB,CAACC,eAAjB,KACC,MAAMD,gBAAgB,CAACC,eAAjB,CAAiCb,GAAjC,CADP,CADF;AAIA,+BAAYc,cAAZ;AAA4Bb,QAAAA;AAA5B;AACD;;AAEDc,IAAAA,MAAM,GAAI;AACR,aAAO,MAAC,gBAAD,eAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAfqB,GADkB,yCAElB,gBAAeR,cAAc,CAACI,gBAAD,CAAmB,GAF9B;AAAA,CAArC,C,CAmBP;;AAEA,OAAO,MAAMK,MAAM,GAAG,MAAM;AAC1BnB,EAAAA,MAAM,CAACoB,MAAP,CAAc,OAAd,EAD0B,CAG1B;;AACAC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,EAAsC,WAAtC;AAEAzB,EAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;AACD,CAPM","sourcesContent":["import {Component} from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\n\n\n// CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n    const {token} = nextCookie(ctx);\n\n    if(ctx.req && !token) {\n        ctx.res.writeHead(302, {Location: '/login'})\n        ctx.res.end()\n        return\n    }\n    if(!token) {\n        Router.push('/login')\n    }\n\n    return token\n}\n\n\n// IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\n\n// Gets the display name of a JSX component for dev tools\nconst getDisplayName = Component =>\n  Component.displayName || Component.name || 'Component'\n\nexport const withAuthSync = WrappedComponent =>\n  class extends Component {\n    static displayName = `withAuthSync(${getDisplayName(WrappedComponent)})`\n\n    static async getInitialProps (ctx) {\n      const token = auth(ctx)//Check token is valid here\n\n      const componentProps =\n        WrappedComponent.getInitialProps &&\n        (await WrappedComponent.getInitialProps(ctx))\n\n      return { ...componentProps, token }\n    }\n\n    render () {\n      return <WrappedComponent {...this.props} />\n    }\n}\n\n// LOGOUT FUNCTION\n\nexport const logout = () => {\n  cookie.remove(\"token\");\n\n  // To trigger the event listener we save some random data into the `logout` key\n  window.localStorage.setItem(\"logout\", Date.now()); \n\n  Router.push(\"/login\");\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport cookies from 'next-cookies';\nimport cookie from 'js-cookie';\nexport const login = ({\n  logintoken\n}) => {\n  cookie.set('logintoken', logintoken, {\n    expires: 1\n  });\n  Router.push('/authorsAreaDash');\n}; // CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n  const {\n    logintoken\n  } = cookies(ctx);\n  console.log('auth', logintoken); // If there's no token, it means the user is not logged in.\n\n  if (!logintoken) {\n    if (ctx.req) {\n      // If `ctx.req` is available it means we are on the server.\n      ctx.res.writeHead(302, {\n        Location: '/authorsArea'\n      });\n      ctx.res.end();\n    } else {\n      // This should only happen on client.\n      Router.push('/authorsArea');\n    }\n  }\n\n  return logintoken;\n}; // LOGOUT FUNCTION\n\nexport const logout = async ctx => {\n  await cookie.remove('logintoken'); // To trigger the event listener we save some random data into the `logout` key\n\n  await window.localStorage.setItem(\"logout\", _Date$now());\n  await Router.push(\"/authorsArea\");\n}; // IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/authorsArea');\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout);\n      return () => {\n        window.removeEventListener('storage', syncLogout);\n        window.localStorage.removeItem('logout');\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, props);\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const logintoken = auth(ctx); // ! AUTH\n\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread({}, componentProps, {\n      logintoken\n    });\n  };\n\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { createRef } from 'react';\nimport { Button } from './Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { GetForm, SendFile } from './Forms';\nexport default function Popup(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      csrf = _React$useState4[0],\n      setCsrf = _React$useState4[1];\n\n  var fileInput = React.createRef();\n\n  var handleClickOpen =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var getCsrf;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return setOpen(true);\n\n            case 2:\n              _context.next = 4;\n              return GetForm('https://prelude.eurobrake.net/upload');\n\n            case 4:\n              getCsrf = _context.sent;\n              _context.next = 7;\n              return setCsrf(getCsrf);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleClickOpen() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var file;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fileInput.current.files[0].name;\n\n            case 2:\n              file = _context2.sent;\n              _context2.next = 5;\n              return console.log({\n                file: file,\n                csrf: csrf\n              });\n\n            case 5:\n              _context2.next = 7;\n              return SendFile({\n                file: file,\n                csrf: csrf\n              });\n\n            case 7:\n              _context2.next = 9;\n              return alert(\"Selected file - \".concat(fileInput.current.files[0].name));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", null, __jsx(Button, {\n    bcolor: \"#134381\",\n    background: \"#134381\",\n    br: \"100rem\",\n    padding: \"0.5rem 2rem\",\n    style: {\n      margin: \".5rem 0\"\n    },\n    fontSize: \"1.7rem\",\n    onClick: handleClickOpen\n  }, \"Upload File\"), __jsx(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, __jsx(\"form\", null, __jsx(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \"Upload File\"), __jsx(DialogContent, null, __jsx(DialogContentText, null, \"Please do not exceed 50mb file size example\"), __jsx(\"input\", {\n    type: \"file\",\n    ref: fileInput\n  })), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    value: \"cancel\",\n    color: \"#134381\",\n    bcolor: \"#134381\"\n  }, \"Cancel\"), __jsx(Button, {\n    onClick: function onClick() {\n      return handleSubmit();\n    },\n    color: \"#134381\",\n    bcolor: \"#134381\"\n  }, \"Submit\")))));\n}","map":null,"metadata":{},"sourceType":"module"}
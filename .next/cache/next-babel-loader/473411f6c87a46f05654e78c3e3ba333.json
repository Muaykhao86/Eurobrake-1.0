{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport fetch from 'isomorphic-unfetch';\nimport styled from 'styled-components';\nimport { withAuthSync, logout } from '../utils/auth';\nconst DemoDiv = styled.form.withConfig({\n  displayName: \"authorsArea__DemoDiv\",\n  componentId: \"sc-17gi1ng-0\"\n})([\"display:flex;flex-direction:column;align-self:center;margin-top:10rem;max-width:\", \";\"], props => props.theme.maxWidth);\nconst Demo = styled.h1.withConfig({\n  displayName: \"authorsArea__Demo\",\n  componentId: \"sc-17gi1ng-1\"\n})([\"padding:10rem;margin:5rem;color:orangered;\"]);\n\nclass AuthorsArea extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      data\n    } = props;\n  }\n\n  render() {\n    console.log(data);\n    return __jsx(\"div\", {\n      className: \"\"\n    }, __jsx(\"h1\", null, \"you are logged In\"), __jsx(\"button\", {\n      onClick: () => logout\n    }, \"logout\"));\n  }\n\n}\n\nAuthorsArea.getInitialProps = async ctx => {\n  // We use `nextCookie` to get the cookie and pass the token to the\n  // frontend in the `props`.\n  const {\n    token\n  } = nextCookie(ctx);\n\n  const redirectOnError = () => process.browser ? Router.push('/login') : ctx.res.writeHead(301, {\n    Location: '/login'\n  });\n\n  try {\n    const response = await fetch(apiUrl, {\n      credentials: 'include',\n      headers: {\n        Authorization: _JSON$stringify({\n          token\n        })\n      }\n    });\n\n    if (response.ok) {\n      return await response.json();\n    } else {\n      // https://github.com/developit/unfetch#caveats\n      return redirectOnError();\n    }\n  } catch (error) {\n    // Implementation or Network error\n    return redirectOnError();\n  }\n};\n\nexport default withAuthSync(AuthorsArea);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/pages/f/[id]/[formType].js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport cookies from 'next-cookies';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport OneForm from '../../../components/forms/OneForm';\nimport { LoginForm } from '../../../components/forms/LoginForm';\nimport { Button } from '../../../components/Button';\nimport { AbstractForm } from '../../../components/forms/Abstract';\nimport { Authorprofile } from '../../../components/forms/Authorprofile';\nimport { Exhibitorprofile } from '../../../components/forms/Exhibitorprofile';\nimport { StyledPage } from '../../../components/styles/PageStyles';\nimport HeroSection from '../../../components/HeroSection';\nimport { FixedDates, FixedBox } from '../../../components/Dates'; // import { Esop } from './Esop';\n// import { GetFormSSR } from '../../components/forms/FormActions';\n\nconst Form = props => {\n  const {\n    presets,\n    __csrf_token\n  } = props.data || {};\n  const {\n    apiUrl,\n    id,\n    formType,\n    taskType\n  } = props; // ? GETTIN FROM GET INITIAL PROPS\n\n  const FT = formType || '';\n  const TT = taskType || '';\n  console.log('uniform', {\n    apiUrl,\n    id,\n    FT,\n    TT,\n    __csrf_token,\n    presets\n  });\n  return __jsx(React.Fragment, null, __jsx(HeroSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Eurobrake 2020\"), __jsx(StyledPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(FixedDates, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), __jsx(FixedBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/authorsAreaDash\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(Button, {\n    background: \"#134381\",\n    br: \"100rem\",\n    bcolor: \"#134381\",\n    style: {\n      marginLeft: 'auto',\n      color: \"#FFF\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Back to Dashboard\")), __jsx(OneForm, {\n    form: FT,\n    type: TT,\n    presets: presets,\n    csrf: __csrf_token,\n    apiUrl: apiUrl,\n    paperId: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })));\n};\n\nexport default Form; // Form.getInitialProps = async context => {\n//     const { id, taskUrl, formType, taskType } = context.query ;\n//     const { logintoken } = cookies(context) || {};\n//     let apiUrl = '';\n//    if(formType == 'contact') apiUrl = `https://prelude.eurobrake.net/contact` \n//    if(formType == 'author') apiUrl = `https://prelude.eurobrake.net/authors/profile` \n//    if(formType == 'reset') apiUrl = `https://prelude.eurobrake.net/authors/profile` \n//    if(formType != 'reset' && formType != 'author' && formType != 'contact') apiUrl = `https://prelude.eurobrake.net/authors/edit/${id}`\n//     console.log('1st GIP', { id, logintoken, apiUrl, taskUrl, formType, taskType })\n//     console.log('props', { id, logintoken, apiUrl, taskUrl, formType, taskType })\n//     const redirectOnError = () =>\n//         process.browser\n//             ? Router.push('/authorsArea')\n//             : context.res.writeHead(301, { Location: '/authorsArea' })\n//     if(formType === 'reset') return { apiUrl, id, formType, taskType}// todo sort out real call\n//     if(formType === 'contact') {\n//         try {\n//             const response = await fetch(apiUrl, {\n//                 credentials: 'include',\n//                 cache: 'no-cache',\n//             })\n//             const data = await response.json()\n//             if (data.status === 'success') {\n//                 console.log('res.ok uniform GIP', data)\n//                 return { data, apiUrl, id, formType, taskType }\n//             }\n//             else {\n//                 console.log('not reading success')\n//                 console.log('stringyfied', JSON.stringify(data))\n//                 // https://github.com/developit/unfetch#caveats\n//                 return redirectOnError()\n//             }\n//         } catch (error) {\n//             // Implementation or Network error\n//             console.log(error)\n//             return await redirectOnError()\n//         }\n//     }\n//    else if (logintoken) {\n//         try {\n//             const response = await fetch(apiUrl, {\n//                 credentials: 'include',\n//                 cache: 'no-cache',\n//                 headers: {\n//                     Authorization: 'Bearer ' + logintoken,\n//                 }\n//             })\n//             const data = await response.json()\n//             if (data.status === 'success') {\n//                 console.log('res.ok 2nd GIP', data)\n//                 return { data, apiUrl, id, formType, taskType }\n//             }\n//             else {\n//                 console.log('not reading success')\n//                 console.log('stringyfied', JSON.stringify(data))\n//                 // https://github.com/developit/unfetch#caveats\n//                 return redirectOnError()\n//             }\n//         } catch (error) {\n//             // Implementation or Network error\n//             console.log(error)\n//             return await redirectOnError()\n//         }\n//     }     \n// }","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/pages/f/[id]/[formType].js"],"names":["React","Component","cookies","Router","fetch","Link","OneForm","LoginForm","Button","AbstractForm","Authorprofile","Exhibitorprofile","StyledPage","HeroSection","FixedDates","FixedBox","Form","props","presets","__csrf_token","data","apiUrl","id","formType","taskType","FT","TT","console","log","marginLeft","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,gBAAT,QAAiC,4CAAjC;AACA,SAASC,UAAT,QAA2B,uCAA3B;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,SAAQC,UAAR,EAAoBC,QAApB,QAAmC,2BAAnC,C,CACA;AACA;;AACA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA6BF,KAAK,CAACG,IAAN,IAAc,EAAjD;AACA,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,EAAT;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA;AAAvB,MAAmCP,KAAzC,CAFkB,CAE6B;;AAC/C,QAAMQ,EAAE,GAAGF,QAAQ,IAAI,EAAvB;AACA,QAAMG,EAAE,GAAGF,QAAQ,IAAI,EAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsB;AAACP,IAAAA,MAAD;AAASC,IAAAA,EAAT;AAAaG,IAAAA,EAAb;AAAiBC,IAAAA,EAAjB;AAAqBP,IAAAA,YAArB;AAAmCD,IAAAA;AAAnC,GAAtB;AACA,SACI,4BACA,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,EAIA,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEY,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFZ,EAKI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACc,MAAC,MAAD;AACF,IAAA,UAAU,EAAC,SADT;AAEF,IAAA,EAAE,EAAC,QAFD;AAGF,IAAA,MAAM,EAAC,SAHL;AAIF,IAAA,KAAK,EAAE;AAAEW,MAAAA,UAAU,EAAE,MAAd;AAAsBC,MAAAA,KAAK,EAAC;AAA5B,KAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADd,CALJ,EAcI,MAAC,OAAD;AAAS,IAAA,IAAI,EAAEL,EAAf;AAAmB,IAAA,IAAI,EAAEC,EAAzB;AAA6B,IAAA,OAAO,EAAER,OAAtC;AAA+C,IAAA,IAAI,EAAEC,YAArD;AAAmE,IAAA,MAAM,EAAEE,MAA3E;AAAmF,IAAA,OAAO,EAAEC,EAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CAJA,CADJ;AAuBH,CA7BD;;AA8BA,eAAeN,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport cookies from 'next-cookies';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport OneForm from '../../../components/forms/OneForm';\nimport { LoginForm } from '../../../components/forms/LoginForm';\nimport { Button } from '../../../components/Button';\nimport { AbstractForm } from '../../../components/forms/Abstract';\nimport { Authorprofile } from '../../../components/forms/Authorprofile';\nimport { Exhibitorprofile } from '../../../components/forms/Exhibitorprofile';\nimport { StyledPage } from '../../../components/styles/PageStyles';\nimport HeroSection from '../../../components/HeroSection';\nimport {FixedDates, FixedBox} from '../../../components/Dates';\n// import { Esop } from './Esop';\n// import { GetFormSSR } from '../../components/forms/FormActions';\nconst Form = props => {\n    const { presets, __csrf_token, } = props.data || {};\n    const {apiUrl, id, formType, taskType} = props;// ? GETTIN FROM GET INITIAL PROPS\n    const FT = formType || '';\n    const TT = taskType || '';\n    console.log('uniform',{apiUrl, id, FT, TT, __csrf_token, presets})\n    return (\n        <>\n        <HeroSection>\n            Eurobrake 2020\n            </HeroSection>\n        <StyledPage>\n            <FixedDates/>\n                    <FixedBox />\n            {/* {formType == 'abstract' && formType == 'author' && */}\n\n            <Link href=\"/authorsAreaDash\">\n                          <Button\n                        background=\"#134381\"\n                        br=\"100rem\"\n                        bcolor=\"#134381\"\n                        style={{ marginLeft: 'auto', color:\"#FFF\" }}\n                    >Back to Dashboard</Button>\n            </Link>\n            {/* } */}\n            <OneForm form={FT} type={TT} presets={presets} csrf={__csrf_token} apiUrl={apiUrl} paperId={id}/>\n    </StyledPage>\n        </>\n    )\n}\nexport default Form\n\n// Form.getInitialProps = async context => {\n//     const { id, taskUrl, formType, taskType } = context.query ;\n//     const { logintoken } = cookies(context) || {};\n//     let apiUrl = '';\n//    if(formType == 'contact') apiUrl = `https://prelude.eurobrake.net/contact` \n//    if(formType == 'author') apiUrl = `https://prelude.eurobrake.net/authors/profile` \n//    if(formType == 'reset') apiUrl = `https://prelude.eurobrake.net/authors/profile` \n//    if(formType != 'reset' && formType != 'author' && formType != 'contact') apiUrl = `https://prelude.eurobrake.net/authors/edit/${id}`\n   \n//     console.log('1st GIP', { id, logintoken, apiUrl, taskUrl, formType, taskType })\n//     console.log('props', { id, logintoken, apiUrl, taskUrl, formType, taskType })\n//     const redirectOnError = () =>\n//         process.browser\n//             ? Router.push('/authorsArea')\n//             : context.res.writeHead(301, { Location: '/authorsArea' })\n\n//     if(formType === 'reset') return { apiUrl, id, formType, taskType}// todo sort out real call\n//     if(formType === 'contact') {\n//         try {\n//             const response = await fetch(apiUrl, {\n//                 credentials: 'include',\n//                 cache: 'no-cache',\n//             })\n//             const data = await response.json()\n//             if (data.status === 'success') {\n//                 console.log('res.ok uniform GIP', data)\n//                 return { data, apiUrl, id, formType, taskType }\n//             }\n//             else {\n//                 console.log('not reading success')\n//                 console.log('stringyfied', JSON.stringify(data))\n//                 // https://github.com/developit/unfetch#caveats\n//                 return redirectOnError()\n//             }\n//         } catch (error) {\n//             // Implementation or Network error\n//             console.log(error)\n//             return await redirectOnError()\n//         }\n//     }\n//    else if (logintoken) {\n//         try {\n//             const response = await fetch(apiUrl, {\n//                 credentials: 'include',\n//                 cache: 'no-cache',\n//                 headers: {\n//                     Authorization: 'Bearer ' + logintoken,\n//                 }\n//             })\n//             const data = await response.json()\n//             if (data.status === 'success') {\n//                 console.log('res.ok 2nd GIP', data)\n//                 return { data, apiUrl, id, formType, taskType }\n//             }\n//             else {\n//                 console.log('not reading success')\n//                 console.log('stringyfied', JSON.stringify(data))\n//                 // https://github.com/developit/unfetch#caveats\n//                 return redirectOnError()\n//             }\n//         } catch (error) {\n//             // Implementation or Network error\n//             console.log(error)\n//             return await redirectOnError()\n//         }\n    \n//     }     \n// }\n   "]},"metadata":{},"sourceType":"module"}
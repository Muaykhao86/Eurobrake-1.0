{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie'; // CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx);\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/login'\n    });\n    ctx.res.end();\n    return;\n  }\n\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n}; // IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n// Gets the display name of a JSX component for dev tools\n\nconst getDisplayName = Component => Component.displayName || Component.name || 'Component';\n\nexport const withAuthSync = WrappedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const token = auth(ctx); //Check token is valid here\n\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread({}, componentProps, {\n        token\n      });\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n}; // LOGOUT FUNCTION\n\nexport const logout = () => {\n  cookie.remove(\"token\"); // To trigger the event listener we save some random data into the `logout` key\n\n  window.localStorage.setItem(\"logout\", _Date$now());\n  Router.push(\"/login\");\n};","map":null,"metadata":{},"sourceType":"module"}
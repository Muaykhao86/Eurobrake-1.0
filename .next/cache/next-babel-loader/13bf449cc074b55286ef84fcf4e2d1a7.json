{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/danielhardiman/Desktop/Eurobrake-1.0/components/forms/ResetForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { ResetSchema } from './FormControl'; // *Reset form is fine from here\n\nexport var ResetForm = function ResetForm(props) {\n  _s();\n\n  var _useState = useState(false),\n      Toggle = _useState[0],\n      setToggle = _useState[1];\n\n  var _useState2 = useState(false),\n      Loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      Status = _useState3[0],\n      setStatus = _useState3[1];\n\n  var url = \"https://prelude.eurobrake.net/authors/reset/\".concat(props.paperId);\n  return __jsx(Formik, {\n    initialValues: emptyInitial,\n    validationSchema: ResetSchema,\n    enableReinitialize: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var values = _ref.values,\n        handleChange = _ref.handleChange,\n        validateForm = _ref.validateForm,\n        errors = _ref.errors,\n        setFieldTouched = _ref.setFieldTouched,\n        handleSubmit = _ref.handleSubmit,\n        submitForm = _ref.submitForm;\n\n    var allTouched = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Object.keys(values).forEach(function (key) {\n                  setFieldTouched(key, true);\n                });\n\n              case 2:\n                _context.next = 4;\n                return validateForm().then(function (errors) {\n                  return Object.keys(errors).length === 0 && onSubmit();\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function allTouched() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var onSubmit = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var FT, res, data, dataStatus, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                FT = 'reset';\n                _context3.next = 3;\n                return SendForm({\n                  values: values,\n                  url: url,\n                  FT: FT\n                });\n\n              case 3:\n                res = _context3.sent;\n                _context3.next = 6;\n                return res;\n\n              case 6:\n                data = _context3.sent;\n                _context3.next = 9;\n                return data;\n\n              case 9:\n                _context3.t0 = _context3.sent;\n\n                if (!_context3.t0) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                _context3.t0 = data.status;\n\n              case 12:\n                dataStatus = _context3.t0;\n                setStatus(dataStatus);\n                console.log({\n                  data: data\n                });\n\n                result = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return setLoading(false);\n\n                          case 2:\n                            _context2.next = 4;\n                            return setToggle(true);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function result() {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n\n                return _context3.abrupt(\"return\", result());\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function onSubmit() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(StyledForm, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      className: \"form-title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"Please provide your new password\"), __jsx(\"div\", {\n      className: \"form-field\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"label\",\n      className: \"form-label\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.new_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"new_password\",\n      component: TextField,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    })), __jsx(\"div\", {\n      className: \"form-field\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"confirm_password\",\n      className: \"form-label\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, \"Confirm Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.confirm_password,\n      style: {\n        color: '#134381'\n      },\n      name: \"confirm_password\",\n      component: TextField,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    })), Loading ? __jsx(CircularProgress, {\n      size: 24,\n      className: \"loading\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }\n    }) : __jsx(Button, {\n      onClick: function onClick() {\n        return allTouched();\n      },\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, \"Reset\"), Toggle && __jsx(Typography, {\n      gutterBottom: true,\n      className: \"form-title\",\n      style: {\n        alignSelf: 'center',\n        textTransform: 'uppercase'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }\n    }, Status));\n  });\n};\n\n_s(ResetForm, \"XFQEqiPDnE7JZU5O8RsBmgMm3SQ=\");\n\n_c = ResetForm;\nvar emptyInitial = {\n  new_password: '',\n  confirm_password: ''\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetForm\");","map":{"version":3,"sources":["/Users/danielhardiman/Desktop/Eurobrake-1.0/components/forms/ResetForm.js"],"names":["React","Component","useState","Formik","Form","Field","ErrorMessage","TextField","StyledForm","Button","CircularProgress","SendForm","Typography","ResetSchema","ResetForm","props","Toggle","setToggle","Loading","setLoading","Status","setStatus","url","paperId","emptyInitial","values","handleChange","validateForm","errors","setFieldTouched","handleSubmit","submitForm","allTouched","Object","keys","forEach","key","then","length","onSubmit","FT","res","data","status","dataStatus","console","log","result","new_password","color","confirm_password","margin","alignSelf","textTransform"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {ResetSchema} from './FormControl';\n\n\n// *Reset form is fine from here\n\nexport const ResetForm = (props) => {\n    const [Toggle, setToggle] = useState(false);\n  const [Loading, setLoading] = useState(false);\n\n    const [Status, setStatus] = useState(null);\n\n    const url =  `https://prelude.eurobrake.net/authors/reset/${props.paperId}`;\n    return (\n        <Formik\n            initialValues={emptyInitial}\n            validationSchema={ResetSchema}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm, errors, setFieldTouched, handleSubmit, submitForm }) => {\n\n                const allTouched = async () => {\n                     await Object.keys(values).forEach(key => {   \n                        setFieldTouched(key, true)});\n\n                       await validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())\n                }\n\n\n                const onSubmit = async () => {\n                    let FT = 'reset';\n                  let res =  await SendForm({values, url, FT});\n                  let data = await  res;\n                  let dataStatus= await  data && data.status;\n                  setStatus(dataStatus)\n                  console.log({data})\n                  let result = async () => {\n                  await  setLoading(false)\n                  await setToggle(true)\n                   }    \n                  \n                return result() \n                }\n\n                return (\n                    <StyledForm>\n                    <Typography className=\"form-title\">Please provide your new password</Typography>\n\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"label\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.new_password}\n                                style={{ color: '#134381' }}\n                                name=\"new_password\"\n                                component={TextField}\n                            />\n                        </div>\n                     \n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"confirm_password\"\n                                className=\"form-label\">\n                                Confirm Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.confirm_password}\n                                style={{ color: '#134381' }}\n                                name=\"confirm_password\"\n                                component={TextField}\n                            />\n                        </div>\n                        {Loading ?  <CircularProgress size={24} className=\"loading\"/> : \n                        <Button \n                            onClick={() => allTouched()}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            Reset\n                        </Button>}\n                    {Toggle && <Typography gutterBottom className=\"form-title\" style={{alignSelf: 'center',textTransform: 'uppercase'}}>{Status}</Typography>}\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n\n\nconst emptyInitial = {\n    new_password: '',\n    confirm_password: '',\n};\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
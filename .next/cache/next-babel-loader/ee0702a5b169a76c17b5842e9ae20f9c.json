{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/utils/auth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport cookies from 'next-cookies';\nimport cookie from 'js-cookie';\nimport fetch from 'isomorphic-unfetch';\nexport const login = ({\n  logintoken\n}) => {\n  cookie.set('logintoken', logintoken, {\n    expires: 1\n  });\n  Router.push('/authorsArea');\n}; // CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n  const {\n    logintoken\n  } = cookies(ctx); // If there's no token, it means the user is not logged in.\n\n  if (!logintoken) {\n    if (ctx.req) {\n      // If `ctx.req` is available it means we are on the server.\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    } else {\n      // This should only happen on client.\n      Router.push('/login');\n    }\n  }\n\n  return logintoken; // const { logintoken } = cookies(ctx);\n  // if (ctx.req && !logintoken) {\n  //   ctx.res.writeHead(302, { Location: '/login' })\n  //   ctx.res.end()\n  // }\n  // console.log('AUTH => ', logintoken)\n  // if (!logintoken) {\n  //   Router.push('/login')\n  // }\n  // return logintoken\n}; // LOGOUT FUNCTION\n\nexport const logout = async () => {\n  await cookie.remove('logintoken');\n  const res = await fetch('https://prelude.eurobrake.net/logout', {\n    credentials: 'include'\n  });\n  const data = await res.json().catch(error => console.log(error));\n  console.log('logout', data); // To trigger the event listener we save some random data into the `logout` key\n\n  await window.localStorage.setItem(\"logout\", _Date$now());\n  await Router.push(\"/login\");\n}; // IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/login');\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout);\n      return () => {\n        window.removeEventListener('storage', syncLogout);\n        window.localStorage.removeItem('logout');\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }));\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const logintoken = auth(ctx); // ! AUTH\n\n    console.log('down to wrap your components', 'logintoken authors auth sync ', logintoken);\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    console.log('withauthsync', 'ctx => ', ctx, 'logintoken => ', logintoken);\n    return _objectSpread({}, componentProps, {\n      logintoken\n    });\n  };\n\n  return Wrapper;\n};","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/utils/auth.js"],"names":["useEffect","Router","cookies","cookie","fetch","login","logintoken","set","expires","push","auth","ctx","req","res","writeHead","Location","end","logout","remove","credentials","data","json","catch","error","console","log","window","localStorage","setItem","withAuthSync","WrappedComponent","Wrapper","props","syncLogout","event","key","addEventListener","removeEventListener","removeItem","getInitialProps","componentProps"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport Router from 'next/router';\nimport cookies from 'next-cookies';\nimport cookie from 'js-cookie';\nimport fetch from 'isomorphic-unfetch';\n\n\n\n\n\nexport const login = ({logintoken} ) => {\n  cookie.set('logintoken', logintoken, { expires: 1 })\n  Router.push('/authorsArea')\n}\n\n// CHECK TOKEN, IF WE HAVE ONE RETURN TOKEN, IF WE DONT REDIRECT TO LOGIN PAGE\n\nexport const auth = ctx => {\n\n  const { logintoken } = cookies(ctx);\n    // If there's no token, it means the user is not logged in.\n  if (!logintoken) {\n    if (ctx.req) {\n      // If `ctx.req` is available it means we are on the server.\n      ctx.res.writeHead(302, { Location: '/login' })\n      ctx.res.end()\n    } else {\n      // This should only happen on client.\n      Router.push('/login')\n    }\n  }\n\nreturn logintoken;\n\n  // const { logintoken } = cookies(ctx);\n\n  // if (ctx.req && !logintoken) {\n  //   ctx.res.writeHead(302, { Location: '/login' })\n  //   ctx.res.end()\n  // }\n  // console.log('AUTH => ', logintoken)\n  // if (!logintoken) {\n  //   Router.push('/login')\n  // }\n\n  // return logintoken\n}\n\n// LOGOUT FUNCTION\n\nexport const logout = async () => {\n \n  await cookie.remove('logintoken')\n \n  const res = await fetch('https://prelude.eurobrake.net/logout',\n    {\n      credentials: 'include'\n    });\n  const data = await res.json().catch(error => console.log(error));\n  console.log('logout', data);\n  // To trigger the event listener we save some random data into the `logout` key\n  await window.localStorage.setItem(\"logout\", Date.now());\n\n  await Router.push(\"/login\")\n};\n\n// IF LOGGED IN/ HAS TOKEN RETURN THE COMPONENT \n\n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!')\n        Router.push('/login')\n      }\n    }\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout)\n\n      return () => {\n        window.removeEventListener('storage', syncLogout)\n        window.localStorage.removeItem('logout')\n      }\n    }, [null])\n\n    return <WrappedComponent {...props} />\n  }\n\n  Wrapper.getInitialProps = async ctx => {\n    const logintoken = auth(ctx)                // ! AUTH\n    console.log('down to wrap your components', 'logintoken authors auth sync ', logintoken)\n    const componentProps =\n      WrappedComponent.getInitialProps &&\n      (await WrappedComponent.getInitialProps(ctx))\n    console.log('withauthsync', 'ctx => ', ctx, 'logintoken => ', logintoken)\n    return { ...componentProps, logintoken }\n  }\n\n  return Wrapper\n}\n"]},"metadata":{},"sourceType":"module"}
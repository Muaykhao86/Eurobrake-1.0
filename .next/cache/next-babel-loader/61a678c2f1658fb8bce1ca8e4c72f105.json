{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport { LoginSchema } from './FormControl';\nimport Link from 'next/link';\nexport const LoginForm = () => {\n  const {\n    0: Loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: Reset,\n    1: setReset\n  } = useState(false);\n  const {\n    0: Toggle,\n    1: setToggle\n  } = useState(false);\n  const {\n    0: Status,\n    1: setStatus\n  } = useState(null);\n  const emptyReset = {\n    email: ''\n  };\n  const emptyInitial = {\n    username: '',\n    password: ''\n  };\n  const url = Reset ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n  return __jsx(Formik, {\n    initialValues: Reset ? emptyReset : emptyInitial,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, ({\n    values,\n    handleChange,\n    validateForm,\n    errors\n  }) => {\n    const onSubmit = async () => {\n      await setLoading(true);\n      let FT = Reset ? 'reset' : 'login';\n      const res = await SendForm({\n        url,\n        values,\n        FT\n      });\n      const data = await res;\n      const dataStatus = (await data) && data.Status;\n      await setStatus(dataStatus);\n\n      let result = async () => {\n        await setLoading(false);\n        await setToggle(true);\n      };\n\n      return result();\n    };\n\n    return __jsx(StyledForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, Reset && __jsx(Typography, {\n      className: \"form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Please enter your email to reset your password\"), Reset ? __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"email\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Email:\"), __jsx(Field, {\n      type: \"email\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.email,\n      style: {\n        color: '#134381'\n      },\n      name: \"email\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"username\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Email:\"), __jsx(Field, {\n      type: \"username\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.username,\n      style: {\n        color: '#134381'\n      },\n      name: \"username\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"form-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"password\",\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Password:\"), __jsx(Field, {\n      type: \"password\",\n      className: \"form-input\",\n      onClick: handleChange,\n      value: values.password,\n      style: {\n        color: '#134381'\n      },\n      name: \"password\",\n      component: TextField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }))), Loading ? __jsx(CircularProgress, {\n      size: 24,\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }) : __jsx(Button, {\n      onClick: () => validateForm().then(errors => _Object$keys(errors).length === 0 && onSubmit()),\n      bcolor: \"#134381\",\n      background: \"#134381\",\n      br: \"100rem\",\n      style: {\n        margin: \"3rem\"\n      },\n      padding: \".5rem 4rem\",\n      fontSize: \"1.7rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, Reset ? 'Reset' : 'Login'), Toggle && __jsx(Typography, {\n      className: \"form-title\",\n      style: {\n        alignSelf: 'center',\n        textTransform: 'uppercase'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, Status), __jsx(\"a\", {\n      onClick: () => setReset(Reset => !Reset),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, __jsx(Typography, {\n      className: \"form-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, Reset ? 'Back to Login' : 'Forgotten your password?')));\n  });\n}; // ? For now im by passin the email link just to check what i have with a reset token","map":{"version":3,"sources":["/mnt/c/Users/D.Hardiman/desktop/eurobrake/components/forms/LoginForm.js"],"names":["React","Component","useState","Formik","Form","Field","TextField","CircularProgress","StyledForm","Button","SendForm","Typography","LoginSchema","Link","LoginForm","Loading","setLoading","Reset","setReset","Toggle","setToggle","Status","setStatus","emptyReset","email","emptyInitial","username","password","url","values","handleChange","validateForm","errors","onSubmit","FT","res","data","dataStatus","result","color","then","length","margin","alignSelf","textTransform"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Formik, Form, Field, } from 'formik';\nimport { TextField} from 'formik-material-ui';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { StyledForm } from './Formstyles';\nimport { Button } from '../Button';\nimport { SendForm } from './FormActions';\nimport { Typography } from '@material-ui/core';\nimport {LoginSchema} from './FormControl';\nimport Link from 'next/link';\n\n\n\nexport const LoginForm = () => {\n    const [Loading, setLoading] = useState(false);\n    const [Reset, setReset] = useState(false);\n    const [Toggle, setToggle] = useState(false);\n    const [Status, setStatus] = useState(null);\n    const emptyReset={\n        email: '',\n    };\n\n    const emptyInitial = {\n        username: '',\n        password: '',\n    };\n\n    const url = Reset ? 'https://prelude.eurobrake.net/authors/reset' : 'https://prelude.eurobrake.net/authors/login';\n    return (\n        <Formik\n            initialValues={Reset ? emptyReset : emptyInitial}\n            enableReinitialize\n        >\n            {({ values, handleChange, validateForm, errors }) => {\n\n                const onSubmit = async () => {\n                 await setLoading(true);\n                 let FT = Reset ? 'reset' : 'login';\n                   const res = await SendForm({url, values, FT});\n                   const data = await res  ;\n                    const dataStatus = await data && data.Status;\n                  await setStatus(dataStatus)\n                    let result = async () => {\n                  await  setLoading(false)\n                  await setToggle(true)\n                   }    \n                  \n                return result()  \n              }\n\n                return (\n                    <StyledForm>\n                        {Reset && <Typography className=\"form-title\">Please enter your email to reset your password</Typography>}\n\n                        {Reset ?  \n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"email\"\n                                className=\"form-label\">\n                                Email:\n                        </label>\n                            <Field\n                                type=\"email\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.email}\n                                style={{ color: '#134381' }}\n                                name=\"email\"\n                                component={TextField}\n                            />\n                        </div>\n                        :\n                        <>\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"username\"\n                                className=\"form-label\">\n                                Email:\n                        </label>\n                            <Field\n                                type=\"username\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.username}\n                                style={{ color: '#134381' }}\n                                name=\"username\"\n                                component={TextField}\n                            />\n                        </div>\n                        <div className=\"form-field\">\n                            <label\n                                htmlFor=\"password\"\n                                className=\"form-label\">\n                                Password:\n                        </label>\n                            <Field\n                                type=\"password\"\n                                className=\"form-input\"\n                                onClick={handleChange}\n                                value={values.password}\n                                style={{ color: '#134381' }}\n                                name=\"password\"\n                                component={TextField}\n                            />\n                        </div>\n                        </>\n                        }\n                          {Loading ?  <CircularProgress size={24} className=\"loading\"/> : \n                        <Button \n                            onClick={() => validateForm().then(errors => Object.keys(errors).length === 0 && onSubmit())}\n                            bcolor=\"#134381\"\n                            background=\"#134381\"\n                            br=\"100rem\"\n                            style={{ margin: \"3rem\" }}\n                            padding=\".5rem 4rem\"\n                            fontSize=\"1.7rem\">\n                            {Reset ? 'Reset' : 'Login'}\n                        </Button>\n                      }\n\n                    {Toggle && <Typography className=\"form-title\" style={{alignSelf: 'center', textTransform: 'uppercase'}}>{Status}</Typography>}\n                        \n                        {/* <Link\n                            href=\"/f/[id]/[formType]\"\n                            as={`/f/XC8Z3FWxDuQtk68qVs3uwF/reset`} > */}\n                        <a onClick={() => setReset(Reset => !Reset)}>\n                           <Typography className=\"form-link\">{Reset ?   'Back to Login' : 'Forgotten your password?' }</Typography> \n                        </a>\n                        {/* </Link> */}\n                    </StyledForm>\n                )\n            }}\n        </Formik>\n    )\n};\n// ? For now im by passin the email link just to check what i have with a reset token\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}